<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>俺たちに翼はない</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-18T09:42:28.087Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>云之彼端</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客报错修复</title>
    <link href="http://yoursite.com/2020/08/18/%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8D/"/>
    <id>http://yoursite.com/2020/08/18/%E5%8D%9A%E5%AE%A2%E6%8A%A5%E9%94%99%E4%BF%AE%E5%A4%8D/</id>
    <published>2020-08-18T07:54:40.000Z</published>
    <updated>2020-08-18T09:42:28.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客报错问题修复"><a href="#博客报错问题修复" class="headerlink" title="博客报错问题修复"></a>博客报错问题修复</h2><p>最近没怎么更新博客，今天更新的时候发现命令报错了，出现<em>hexo command not found</em>,在尝试了 hexo g和hexo d的时候也无法找到命令，于是就输入node -v和npm -v发现都没有问题，于是就百度了一下出现这个问题的原因，发现是环境变量的问题，就想起了之前的用户名是中文的，因为安装新软件的时候不能有中文路径，所以改成了英文名，其下面的用户文件夹也改了，于是在PATH上重新添加了一条新路径：<em>C:\Users\XXX\AppData\Roaming\npm\node_modules\hexo\bin</em>，XXX就是当前电脑的用户名，问题就解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;博客报错问题修复&quot;&gt;&lt;a href=&quot;#博客报错问题修复&quot; class=&quot;headerlink&quot; title=&quot;博客报错问题修复&quot;&gt;&lt;/a&gt;博客报错问题修复&lt;/h2&gt;&lt;p&gt;最近没怎么更新博客，今天更新的时候发现命令报错了，出现&lt;em&gt;hexo command no
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>影院售票项目</title>
    <link href="http://yoursite.com/2020/08/18/%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2020/08/18/%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-08-18T07:53:51.000Z</published>
    <updated>2020-08-18T10:06:11.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="影院售票系统"><a href="#影院售票系统" class="headerlink" title="影院售票系统"></a>影院售票系统</h3><h5 id="第一个学期做的项目，感觉还是个半成品，存在各种各样的问题，有机会的可能会进行改进-、"><a href="#第一个学期做的项目，感觉还是个半成品，存在各种各样的问题，有机会的可能会进行改进-、" class="headerlink" title="第一个学期做的项目，感觉还是个半成品，存在各种各样的问题，有机会的可能会进行改进 = = 、"></a>第一个学期做的项目，感觉还是个半成品，存在各种各样的问题，有机会的可能会进行改进 = = 、</h5><h5 id="本来还有一个项目设计说明书，但是写的有点烂就不放了。"><a href="#本来还有一个项目设计说明书，但是写的有点烂就不放了。" class="headerlink" title="本来还有一个项目设计说明书，但是写的有点烂就不放了。"></a>本来还有一个项目设计说明书，但是写的有点烂就不放了。</h5><p>登录界面</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818161817117.png" alt="image-20200818161817117"></p><p>用户界面</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818161855653.png" alt="image-20200818161855653"></p><p>分类</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818161924520.png" alt="image-20200818161924520"></p><p>个人中心</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818161940153.png" alt="image-20200818161940153"></p><p>购票</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818161953603.png" alt="image-20200818161953603"></p><p>管理</p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818162006461.png" alt="image-20200818162006461"></p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818162032207.png" alt="image-20200818162032207"></p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818162038256.png" alt="image-20200818162038256"></p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818162044561.png" alt="image-20200818162044561"></p><p><img src="%E5%BD%B1%E9%99%A2%E5%94%AE%E7%A5%A8%E9%A1%B9%E7%9B%AE/image-20200818162049649.png" alt="image-20200818162049649"></p><p>就这样吧= =、</p><h5 id="最后是数据的设计"><a href="#最后是数据的设计" class="headerlink" title="最后是数据的设计"></a>最后是数据的设计</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> CinemaTickets</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">name</span>= ExamDB,</span><br><span class="line">filename=<span class="string">'D:\CinemaTickets.mdf'</span>,</span><br><span class="line"><span class="keyword">size</span>=<span class="number">5</span>mb,</span><br><span class="line"><span class="keyword">maxsize</span>=<span class="number">20</span>mb,</span><br><span class="line">filegrowth=<span class="number">1</span>mb</span><br><span class="line">)</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">name</span>=ExamDB_log,</span><br><span class="line">filename=<span class="string">'D:\CinemaTickets.ldf'</span>,</span><br><span class="line"><span class="keyword">size</span>=<span class="number">2</span>mb,</span><br><span class="line"><span class="keyword">maxsize</span>=<span class="number">10</span>mb,</span><br><span class="line">filegrowth=<span class="number">1</span>mb</span><br><span class="line">)</span><br><span class="line"><span class="keyword">use</span>[CinemaTickets]</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">zhName <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">--用户名</span></span><br><span class="line">UserName <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,<span class="comment">--账号</span></span><br><span class="line">Pwd <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">--密码</span></span><br><span class="line">Birthday datetime <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">--生日</span></span><br><span class="line">Bank <span class="keyword">nvarchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">--卡号</span></span><br><span class="line">Phone <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">--手机</span></span><br><span class="line">[<span class="keyword">Admin</span>] <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">check</span> ([<span class="keyword">Admin</span>]= <span class="number">0</span> <span class="keyword">or</span> [<span class="keyword">Admin</span>]= <span class="number">1</span>) <span class="keyword">default</span> <span class="number">0</span><span class="comment">--权限</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> MovieInfo</span><br><span class="line">(</span><br><span class="line">MovieID <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">MovieName <span class="keyword">nvarchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--电影名</span></span><br><span class="line">Director <span class="keyword">nvarchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--导演</span></span><br><span class="line">ToStar <span class="keyword">nvarchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--主演</span></span><br><span class="line">MovieType <span class="keyword">nvarchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--类型</span></span><br><span class="line">MovieImage <span class="keyword">nvarchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--图片</span></span><br><span class="line">Introduce <span class="keyword">nvarchar</span>(<span class="number">500</span>), <span class="comment">--介绍</span></span><br><span class="line">Price <span class="built_in">float</span>, <span class="comment">--票价 </span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> OrderInfo</span><br><span class="line">(</span><br><span class="line">orderId <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">MovieId <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> MovieInfo(MovieID), <span class="comment">--电影ID</span></span><br><span class="line">UserId <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> <span class="keyword">Users</span>(<span class="keyword">ID</span>), <span class="comment">--用户ID</span></span><br><span class="line"><span class="keyword">addTime</span> datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="keyword">getdate</span>(), <span class="comment">--购买时间</span></span><br><span class="line">addMoney <span class="built_in">float</span> <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--购买金额</span></span><br><span class="line">addNumber <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--购买数量</span></span><br><span class="line">Seat <span class="keyword">nvarchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--座位</span></span><br><span class="line">MovieUptime datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">--上映时间</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ShowMovie</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">MovieId <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> MovieInfo(MovieID), <span class="comment">--电影ID</span></span><br><span class="line">upshow datetime <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--上映时间</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Seat</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">showId <span class="built_in">int</span> <span class="keyword">foreign</span> <span class="keyword">key</span> <span class="keyword">references</span> ShowMovie(<span class="keyword">id</span>), <span class="comment">--上映时间ID</span></span><br><span class="line">seatId <span class="keyword">nvarchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>, <span class="comment">--座位编号</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">addtime</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line"><span class="keyword">addtime</span> datetime, <span class="comment">--上架时间</span></span><br><span class="line">MovieId <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> MovieInfo(MovieID), <span class="comment">--电影ID</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;影院售票系统&quot;&gt;&lt;a href=&quot;#影院售票系统&quot; class=&quot;headerlink&quot; title=&quot;影院售票系统&quot;&gt;&lt;/a&gt;影院售票系统&lt;/h3&gt;&lt;h5 id=&quot;第一个学期做的项目，感觉还是个半成品，存在各种各样的问题，有机会的可能会进行改进-、&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>课堂练习</title>
    <link href="http://yoursite.com/2020/04/07/%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/04/07/%E8%AF%BE%E5%A0%82%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-04-07T06:15:07.000Z</published>
    <updated>2020-04-20T10:16:43.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写一个通信小项目（1）"><a href="#写一个通信小项目（1）" class="headerlink" title="写一个通信小项目（1）"></a>写一个通信小项目（1）</h1><h3 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h3><h4 id="Socket：套接字，是一种网络通讯基础协议"><a href="#Socket：套接字，是一种网络通讯基础协议" class="headerlink" title="Socket：套接字，是一种网络通讯基础协议"></a>Socket：<a href="https://baike.baidu.com/item/%E5%A5%97%E6%8E%A5%E5%AD%97" target="_blank" rel="noopener">套接字</a>，是一种网络通讯基础协议</h4><h5 id="Tcp协议-：是一种可靠网络通信协议，在进行通信之前，要知道服务器的终结点（ip地址和端口号），明确区分为"><a href="#Tcp协议-：是一种可靠网络通信协议，在进行通信之前，要知道服务器的终结点（ip地址和端口号），明确区分为" class="headerlink" title="==Tcp协议==：是一种可靠网络通信协议，在进行通信之前，要知道服务器的终结点（ip地址和端口号），明确区分为"></a>==Tcp协议==：是一种可靠网络通信协议，在进行通信之前，要知道服务器的终结点（ip地址和端口号），明确区分为</h5><h5 id="服务端（监听方）和客户端，客户端要与服务端通信之前，要与服务端进行可靠连接。"><a href="#服务端（监听方）和客户端，客户端要与服务端通信之前，要与服务端进行可靠连接。" class="headerlink" title="服务端（监听方）和客户端，客户端要与服务端通信之前，要与服务端进行可靠连接。"></a>服务端（监听方）和客户端，客户端要与服务端通信之前，要与服务端进行可靠连接。</h5><p>优点</p><blockquote><p>通信可靠，明确知道对方是否已经接受到 消息</p></blockquote><p>缺点</p><blockquote><p>一直保持通信连接，占用网络资源较多，效率较低</p></blockquote><h5 id="Udp协议-：是一种不可靠通信。没有明确区分主从，双方是对等关系，通信前不一定要知道对方是否已经连接。"><a href="#Udp协议-：是一种不可靠通信。没有明确区分主从，双方是对等关系，通信前不一定要知道对方是否已经连接。" class="headerlink" title="==Udp协议==：是一种不可靠通信。没有明确区分主从，双方是对等关系，通信前不一定要知道对方是否已经连接。"></a>==Udp协议==：是一种不可靠通信。没有明确区分主从，双方是对等关系，通信前不一定要知道对方是否已经连接。</h5><p>优点</p><blockquote><p>只是瞬间连接，占用网络资源较小，效率较高</p></blockquote><p>缺点</p><blockquote><p>通信不可靠，发送的信息不知道对方是否接收到，只有对方回应的时候才能确定信息是否送达</p></blockquote><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><h5 id="1-创建服务端项目"><a href="#1-创建服务端项目" class="headerlink" title="1.创建服务端项目"></a>1.创建服务端项目</h5><p>(1)引入Socket相关的命名空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System.Net;</span><br><span class="line">using System.Net.socket;</span><br></pre></td></tr></table></figure><p>(2)声明Tcp监听的对象（变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static TcpListener server;</span><br></pre></td></tr></table></figure><p>(3)创建监听者实例</p><p>创建TcpListener的实例，提供相关的ip地址和端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server &#x3D; new TcpListener(IPAddress.Parse(&quot;127.0.0.1&quot;),8000);</span><br></pre></td></tr></table></figure><p>(4)启动监听者</p><p>(5)启动监听服务</p><p>(6)接收客户端发送的信息</p><p>​    a.创建通信用的网络数据流</p><p>​    b.创建网络数据流对象实例</p><p>​    c.创建byte数组作为缓存区，接收客户端发送的数据</p><p>​    d.开始接收数据</p><p>​    e.将字节数组转换为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static TcpListener server;&#x2F;&#x2F;声明Tcp监听者对象</span><br><span class="line">        private static NetworkStream stream;&#x2F;&#x2F;声明网络数据流</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建TcpListener的实例，提供相关的ip地址和端口</span><br><span class="line">            server &#x3D; new TcpListener(IPAddress.Parse(&quot;127.0.0.1&quot;),8000);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;启动监听者</span><br><span class="line">            server.Start();</span><br><span class="line">            Console.WriteLine(&quot;监听服务已启动&quot;);</span><br><span class="line"></span><br><span class="line">           while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;启动监听服务，这是一个阻塞式的方法，没有客户端连接请求时，就一直停留在此，不会执行下面的代码</span><br><span class="line">                &#x2F;&#x2F;客户端程序请求连接后，才会执行下面代码</span><br><span class="line">                Socket client &#x3D; server.AcceptSocket();</span><br><span class="line">                Console.WriteLine(&quot;接收到&#123;0&#125;的连接请求&quot;, client.RemoteEndPoint);</span><br><span class="line">                stream &#x3D; new NetworkStream(client);&#x2F;&#x2F;为client对象创建网络流对象实例</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">                byte[] buffer &#x3D; new byte[(client as Socket).ReceiveBufferSize];</span><br><span class="line">                &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">                stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">                &#x2F;&#x2F;将字节数组转换为字符串</span><br><span class="line">                string msg &#x3D; Encoding.Default.GetString(buffer);</span><br><span class="line">                Console.WriteLine(msg);</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-创建客户端项目"><a href="#2-创建客户端项目" class="headerlink" title="2.创建客户端项目"></a>2.创建客户端项目</h5><p>(1)同上</p><p>(2)声明Tcp客户端对象(变量)</p><p>(3)创建Tcp客户端实例</p><p>(4)与服务端进行连接（向服务端发出连接请求）</p><p>(5)向服务端发送信息</p><p>​    a.输入要发送的信息</p><p>​    b.将信息转化为字节数组</p><p>​    c.获取传送数据的网络数据流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line"></span><br><span class="line">namespace TCPClient</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;声明客户端对象</span><br><span class="line">        private static TcpClient client;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建Tcp客户端实例</span><br><span class="line">            client &#x3D; new TcpClient();</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;向服务端发送连接请求</span><br><span class="line">            client.Connect(IPAddress.Parse(&quot;127.0.0.1&quot;), 8000);</span><br><span class="line">            Console.WriteLine(&quot;与服务器连接成功&quot;);</span><br><span class="line">             &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                string msg &#x3D; Console.ReadLine();</span><br><span class="line">                &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line">                &#x2F;&#x2F;获取服务端创建的网络数据流对象</span><br><span class="line">                NetworkStream stream &#x3D; client.GetStream();</span><br><span class="line">                &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                stream.Write(data, 0, data.Length);           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>进程：一个应用在内存中执行</p><p>线程：一个程序中并行在内存中执行的代码块</p><blockquote><p>一个应用程序在某个时间内 一个程序只有一个代码块 按照一定控制顺序执行 为单线程</p></blockquote><blockquote><p>一个应用程序在某个时间内 多个代码块同时存在内存中并执行 为多线程</p></blockquote><h5 id="多线程编写"><a href="#多线程编写" class="headerlink" title="多线程编写"></a>多线程编写</h5><p>1.编写完成任务的具体方法</p><p>2.声明创建子线程  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread 线程名 &#x3D; new Thread(new ThreadStart(方法名));</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程名.IsBackgroun &#x3D; true;(可选)</span><br></pre></td></tr></table></figure><p>把子线程设为主线程的后台线程，作用是子线程依赖于主线程的存在，当主线程结束时，子线程也退出</p><p>4.执行子线程 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程名.Start();</span><br></pre></td></tr></table></figure><h4 id="接收的消息后面空格过多的问题"><a href="#接收的消息后面空格过多的问题" class="headerlink" title="接收的消息后面空格过多的问题"></a>接收的消息后面空格过多的问题</h4><p>1.将读信息的代码独立成一个方法</p><p>2.将发送信息的代码独立成一个方法</p><p>3.接收用户连接请求的代码独立成一个方法</p><h5 id="服务端步骤"><a href="#服务端步骤" class="headerlink" title="服务端步骤"></a>服务端步骤</h5><p>1.建立一个新的代码页，用来编写软件代码</p><p>2.为新建的类编写重构代码</p><p>3.编写接收传输信息的方法</p><p>4.编写发送信息的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static TcpListener server;&#x2F;&#x2F;声明Tcp监听者对象</span><br><span class="line">        private static NetworkStream stream;&#x2F;&#x2F;声明网络数据流</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建TcpListener的实例，提供相关的ip地址和端口</span><br><span class="line">            server &#x3D; new TcpListener(IPAddress.Parse(&quot;127.0.0.1&quot;), 8000);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;启动监听者</span><br><span class="line">            server.Start();</span><br><span class="line">            Console.WriteLine(&quot;监听服务已启动&quot;);</span><br><span class="line">            &#x2F;&#x2F;启动监听服务，这是一个阻塞式的方法，没有客户端连接请求时，就一直停留在此，不会执行下面的代码</span><br><span class="line">            &#x2F;&#x2F;客户端程序请求连接后，才会执行下面代码</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                Socket client &#x3D; server.AcceptSocket();</span><br><span class="line">                Console.WriteLine(&quot;接收到&#123;0&#125;的连接请求&quot;, client.RemoteEndPoint);</span><br><span class="line">                Server subServer &#x3D; new Server(client);</span><br><span class="line">                subServer.Run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    public class Server&#x2F;&#x2F;类</span><br><span class="line">    &#123;</span><br><span class="line">        Socket client;&#x2F;&#x2F;已经建立连接的客户端Socket对象</span><br><span class="line">        TcpClient server;&#x2F;&#x2F;声明Tcp监听者对象</span><br><span class="line">        NetworkStream stream;</span><br><span class="line">        public Server(Socket client)&#x2F;&#x2F;类的构造方法</span><br><span class="line">        &#123;</span><br><span class="line">            this.client &#x3D; client;&#x2F;&#x2F;将外部传入的Socket对象保存到本地的</span><br><span class="line">            stream &#x3D; new NetworkStream(client);&#x2F;&#x2F;为client对象创建网络流对象实例</span><br><span class="line">        &#125;</span><br><span class="line">        public void Run()</span><br><span class="line">        &#123;</span><br><span class="line">            new Thread(SendMsg) &#123; IsBackground &#x3D; true &#125;.Start();</span><br><span class="line">            new Thread(ReadMsg) &#123; IsBackground &#x3D; true &#125;.Start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;Thread th1 &#x3D; new Thread(new ThreadStart(SendMsg));</span><br><span class="line">            &#x2F;&#x2F;th1.Start();</span><br><span class="line">        &#125;</span><br><span class="line">        private void ReadMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">               &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">               byte[] buffer &#x3D; new byte[(client as Socket).ReceiveBufferSize];</span><br><span class="line">               &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">               stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">               &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">               string msg &#x3D; Encoding.Default.GetString(buffer).TrimEnd(&#39;\0&#39;);</span><br><span class="line">               &#x2F;&#x2F;替换空格</span><br><span class="line">               &#x2F;&#x2F;msg.Replace(&quot;\0&quot;, &quot;&quot;).Trim();</span><br><span class="line">               Console.WriteLine(msg);             </span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;</span><br><span class="line">        private void SendMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                string msg &#x3D; Console.ReadLine();</span><br><span class="line">                &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line">                &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                stream.Write(data, 0, data.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="客户端步骤"><a href="#客户端步骤" class="headerlink" title="客户端步骤"></a>客户端步骤</h5><p>1.同上</p><p>2.重构发送方法，实现多次发送消息</p><p>3.编写读信息的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TCPClient</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;声明客户端对象</span><br><span class="line">        private static TcpClient client;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建Tcp客户端实例</span><br><span class="line">            client &#x3D; new TcpClient();</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;向服务端发送连接请求</span><br><span class="line">            client.Connect(IPAddress.Parse(&quot;127.0.0.1&quot;), 8000);</span><br><span class="line">            Console.WriteLine(&quot;与服务器连接成功&quot;);</span><br><span class="line">            NetworkStream stream &#x3D; client.GetStream();&#x2F;&#x2F;获取服务的创建的数据流对象</span><br><span class="line">            Class1 cle &#x3D; new Class1(stream);</span><br><span class="line">            Thread th1 &#x3D; new Thread(new ThreadStart(cle.ReadMsg));</span><br><span class="line">            th1.Start();</span><br><span class="line">            Thread th2 &#x3D; new Thread(new ThreadStart(cle.SendMsg));</span><br><span class="line">            th2.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TCPClient</span><br><span class="line">&#123;</span><br><span class="line">    public class Class1</span><br><span class="line">    &#123;</span><br><span class="line">        NetworkStream stream;</span><br><span class="line">        public Class1(NetworkStream stream)</span><br><span class="line">        &#123;</span><br><span class="line">            this.stream &#x3D; stream;</span><br><span class="line">        &#125;</span><br><span class="line">        public void ReadMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">                byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">                &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">                stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">                &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">                string msg &#x3D; Encoding.Default.GetString(buffer).TrimEnd(&#39;\0&#39;);</span><br><span class="line">                &#x2F;&#x2F;替换空格</span><br><span class="line">                &#x2F;&#x2F;msg.Replace(&quot;\0&quot;, &quot;&quot;).Trim();</span><br><span class="line">                Console.WriteLine(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public void SendMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                string msg &#x3D; Console.ReadLine();</span><br><span class="line">                &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line">                &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                stream.Write(data, 0, data.Length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加错误捕捉"><a href="#添加错误捕捉" class="headerlink" title="添加错误捕捉"></a>添加错误捕捉</h4><p>（1）编译性错误（语法错误）：在编写程序进行编译的时候可以发现并排除</p><p>（2）运行时错误（异常）：程序运行时，由于环境，数据等问题造成的异常，这种异常往往会导致程序崩溃（闪            退）</p><h5 id="通过错误捕捉的手段，捕捉到异常出现的原因并加以解决，达到避免程序崩溃（闪退）"><a href="#通过错误捕捉的手段，捕捉到异常出现的原因并加以解决，达到避免程序崩溃（闪退）" class="headerlink" title="通过错误捕捉的手段，捕捉到异常出现的原因并加以解决，达到避免程序崩溃（闪退）"></a>通过错误捕捉的手段，捕捉到异常出现的原因并加以解决，达到避免程序崩溃（闪退）</h5><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;业辑处理程序块</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception e)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;异常处理程序</span><br><span class="line">&#125;</span><br><span class="line">finally&#x2F;&#x2F;可选</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;有无异常都执行的程序块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加访问安全认证"><a href="#添加访问安全认证" class="headerlink" title="添加访问安全认证"></a>添加访问安全认证</h4><p>消息头，消息尾</p><h6 id="发送消息添加消息头"><a href="#发送消息添加消息头" class="headerlink" title="发送消息添加消息头"></a>发送消息添加消息头</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void SendMsg()</span><br><span class="line">       &#123;</span><br><span class="line">           while (true)</span><br><span class="line">           &#123;</span><br><span class="line">               try</span><br><span class="line">               &#123;</span><br><span class="line">                   &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                   string msg &#x3D; Console.ReadLine();</span><br><span class="line">                   &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                   byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line">                   &#x2F;&#x2F;定义一个新的字节数组大小为消息大小加上消息头尾的大小</span><br><span class="line">                   byte[] buffer &#x3D; new byte[data.Length + 3];</span><br><span class="line">                   buffer[0] &#x3D; 255;</span><br><span class="line">                   buffer[1] &#x3D; 255;</span><br><span class="line">                   buffer[2] &#x3D; 210;</span><br><span class="line">                   &#x2F;&#x2F;块复制</span><br><span class="line">                   Buffer.BlockCopy(data,0,buffer,3,data.Length);</span><br><span class="line">                   &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                   stream.Write(buffer, 0, buffer.Length);</span><br><span class="line">               &#125;</span><br><span class="line">               catch (Exception e)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(e.Message);</span><br><span class="line">                   break;</span><br><span class="line">               &#125;            </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h6 id="接收消息判断是否相同"><a href="#接收消息判断是否相同" class="headerlink" title="接收消息判断是否相同"></a>接收消息判断是否相同</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">private void ReadMsg()</span><br><span class="line">       &#123;</span><br><span class="line">           int count &#x3D; 1;</span><br><span class="line">           while (true)</span><br><span class="line">           &#123;</span><br><span class="line">               try</span><br><span class="line">               &#123;</span><br><span class="line">                   &#x2F;&#x2F;定义消息头</span><br><span class="line">                   byte[] FrontMsg &#x3D; new byte[3];</span><br><span class="line">                   stream.Read(FrontMsg, 0, 3);</span><br><span class="line">                   if (!(FrontMsg[0] &#x3D;&#x3D; 255 &amp;&amp; FrontMsg[1] &#x3D;&#x3D; 255 &amp;&amp;FrontMsg[2] &#x3D;&#x3D; 210))</span><br><span class="line">                   &#123;</span><br><span class="line">                       count++;</span><br><span class="line">                       if (count &gt; 5) break;</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">                      </span><br><span class="line">                   &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">                   byte[] buffer &#x3D; new byte[(client as Socket).ReceiveBufferSize];</span><br><span class="line">                   &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">                   stream.Read(buffer, 3, buffer.Length-3);&#x2F;&#x2F;去掉消息头尾的信息</span><br><span class="line">                   Console.WriteLine(msg);</span><br><span class="line">                  Console.WriteLine(DateTime.Now);</span><br><span class="line">        catch (Exception e)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(e.Message);</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line">                     </span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h4 id="处理客户端退出通知机制"><a href="#处理客户端退出通知机制" class="headerlink" title="处理客户端退出通知机制"></a>处理客户端退出通知机制</h4><h4 id="添加协议"><a href="#添加协议" class="headerlink" title="添加协议"></a>添加协议</h4><h5 id="添加现有代码文件"><a href="#添加现有代码文件" class="headerlink" title="添加现有代码文件"></a>添加现有代码文件</h5><p>（1）在解决方案的项目右击，选择添加-&gt;添加现有项</p><p>（2）将文件拷贝到项目所在文件夹，然后通过解决方案，“包括在项目中”选项来包含文件</p><p>（3）在文件夹中复制文件，然后选择要放置的项目名，粘贴</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">private void ReadMsg()</span><br><span class="line">&#123;</span><br><span class="line">    int count &#x3D; 1;</span><br><span class="line">    while (true)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;定义消息头</span><br><span class="line">            byte[] FrontMsg &#x3D; new byte[3];</span><br><span class="line">            stream.Read(FrontMsg, 0, 3);</span><br><span class="line">            if (!(FrontMsg[0] &#x3D;&#x3D; 255 &amp;&amp; FrontMsg[1] &#x3D;&#x3D; 255 &amp;&amp;FrontMsg[2] &#x3D;&#x3D; 210))</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                if (count &gt; 5) break;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">            &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">            byte[] buffer &#x3D; new byte[(client as Socket).ReceiveBufferSize];</span><br><span class="line">            &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">            stream.Read(buffer, 3, buffer.Length-3);&#x2F;&#x2F;去掉消息头尾的信息</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;客户端退出协议</span><br><span class="line">            if (buffer[3] &#x3D;&#x3D; 48 &amp;&amp; buffer[4] &#x3D;&#x3D; 48 &amp;&amp; buffer[5] &#x3D;&#x3D; 48) </span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(client.RemoteEndPoint+&quot;\t断开连接&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">            string msg &#x3D; Encoding.Default.GetString(buffer);&#x2F;&#x2F;.TrimEnd(&#39;\0&#39;);</span><br><span class="line">            &#x2F;&#x2F;替换空格</span><br><span class="line">            msg &#x3D; msg.Replace(&quot;\0&quot;, &quot;&quot;);&#x2F;&#x2F;.Trim();</span><br><span class="line">            &#x2F;&#x2F;协议判断</span><br><span class="line">            switch (msg)</span><br><span class="line">            &#123;</span><br><span class="line">                case &quot;heart&quot;:</span><br><span class="line">                    Draw.Heart();</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;diamond&quot;:</span><br><span class="line">                    Draw.Diamond();</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    Console.WriteLine(msg);</span><br><span class="line">                    Console.WriteLine(DateTime.Now);</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(e.Message);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">              </span><br><span class="line">    &#125;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新后的代码</p><p>服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        private static TcpListener server;&#x2F;&#x2F;声明Tcp监听者对象</span><br><span class="line">        private static NetworkStream stream;&#x2F;&#x2F;声明网络数据流</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建TcpListener的实例，提供相关的ip地址和端口</span><br><span class="line">            server &#x3D; new TcpListener(IPAddress.Parse(&quot;127.0.0.1&quot;), 8000);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;启动监听者</span><br><span class="line">            server.Start();</span><br><span class="line">            Console.WriteLine(&quot;监听服务已启动&quot;);</span><br><span class="line">            &#x2F;&#x2F;启动监听服务，这是一个阻塞式的方法，没有客户端连接请求时，就一直停留在此，不会执行下面的代码</span><br><span class="line">            &#x2F;&#x2F;客户端程序请求连接后，才会执行下面代码</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                Socket client &#x3D; server.AcceptSocket();</span><br><span class="line">                Console.WriteLine(&quot;接收到&#123;0&#125;的连接请求&quot;, client.RemoteEndPoint);</span><br><span class="line">                Server subServer &#x3D; new Server(client);</span><br><span class="line">                subServer.Run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    public class Server&#x2F;&#x2F;类</span><br><span class="line">    &#123;</span><br><span class="line">        Socket client;&#x2F;&#x2F;已经建立连接的客户端Socket对象</span><br><span class="line">        TcpClient server;&#x2F;&#x2F;声明Tcp监听者对象</span><br><span class="line">        NetworkStream stream;</span><br><span class="line">        public Server(Socket client)&#x2F;&#x2F;类的构造方法</span><br><span class="line">        &#123;</span><br><span class="line">            this.client &#x3D; client;&#x2F;&#x2F;将外部传入的Socket对象保存到本地的</span><br><span class="line">            stream &#x3D; new NetworkStream(client);&#x2F;&#x2F;为client对象创建网络流对象实例</span><br><span class="line">        &#125;</span><br><span class="line">        public void Run()</span><br><span class="line">        &#123;</span><br><span class="line">            new Thread(SendMsg) &#123; IsBackground &#x3D; true &#125;.Start();</span><br><span class="line">            new Thread(ReadMsg) &#123; IsBackground &#x3D; true &#125;.Start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;Thread th1 &#x3D; new Thread(new ThreadStart(SendMsg));</span><br><span class="line">            &#x2F;&#x2F;th1.Start();</span><br><span class="line">        &#125;</span><br><span class="line">        private void ReadMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            int count &#x3D; 1;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;定义消息头</span><br><span class="line">                    byte[] FrontMsg &#x3D; new byte[3];</span><br><span class="line">                    stream.Read(FrontMsg, 0, 3);</span><br><span class="line">                    if (!(FrontMsg[0] &#x3D;&#x3D; 255 &amp;&amp; FrontMsg[1] &#x3D;&#x3D; 255 &amp;&amp;FrontMsg[2] &#x3D;&#x3D; 210))</span><br><span class="line">                    &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        if (count &gt; 5) break;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                       </span><br><span class="line">                    &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">                    byte[] buffer &#x3D; new byte[(client as Socket).ReceiveBufferSize];</span><br><span class="line">                    &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">                    stream.Read(buffer, 3, buffer.Length-3);&#x2F;&#x2F;去掉消息头尾的信息</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;客户端退出协议</span><br><span class="line">                    if (buffer[3] &#x3D;&#x3D; 48 &amp;&amp; buffer[4] &#x3D;&#x3D; 48 &amp;&amp; buffer[5] &#x3D;&#x3D; 48) </span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(client.RemoteEndPoint+&quot;\t断开连接&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">                    string msg &#x3D; Encoding.Default.GetString(buffer);&#x2F;&#x2F;.TrimEnd(&#39;\0&#39;);</span><br><span class="line">                    &#x2F;&#x2F;替换空格</span><br><span class="line">                    msg &#x3D; msg.Replace(&quot;\0&quot;, &quot;&quot;);&#x2F;&#x2F;.Trim();</span><br><span class="line">                    &#x2F;&#x2F;协议判断</span><br><span class="line">                    switch (msg)</span><br><span class="line">                    &#123;</span><br><span class="line">                        case &quot;heart&quot;:</span><br><span class="line">                            Draw.Heart();</span><br><span class="line">                            break;</span><br><span class="line">                        case &quot;diamond&quot;:</span><br><span class="line">                            Draw.Diamond();</span><br><span class="line">                            break;</span><br><span class="line">                        default:</span><br><span class="line">                            Console.WriteLine(msg);</span><br><span class="line">                            Console.WriteLine(DateTime.Now);</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e.Message);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                      </span><br><span class="line">            &#125;          </span><br><span class="line">        &#125;</span><br><span class="line">        private void SendMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                    string msg &#x3D; Console.ReadLine();</span><br><span class="line">                    &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                    byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line"></span><br><span class="line">                    byte[] buffer &#x3D; new byte[data.Length + 3];</span><br><span class="line">                    buffer[0] &#x3D; 255;</span><br><span class="line">                    buffer[1] &#x3D; 255;</span><br><span class="line">                    buffer[2] &#x3D; 210;</span><br><span class="line">                    Buffer.BlockCopy(data, 0, buffer, 3, data.Length);</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                    stream.Write(buffer, 0, buffer.Length);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e.Message);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">         </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace TcpServer</span><br><span class="line">&#123;</span><br><span class="line">    public class Draw</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Heart()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            Console.ForegroundColor &#x3D; ConsoleColor.Red;</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                for (int i &#x3D; 0, m &#x3D; 1; i &lt; 30; i++)</span><br><span class="line"></span><br><span class="line">                    for (int l &#x3D; 0; l &lt; new[] &#123; 5, 6, 7, 6, 8, 10, 3, 10, 4, 13, 1, 13, 1, 87, 1, 27, 4, 23, 7, 20, 11, 16, 16, 11, 20, 7, 24, 3, 27, 1 &#125;[i]; l++, m++)</span><br><span class="line">                        System.Console.Write((i % 2 &gt; 0 ? &quot;****&quot;[m % 4] : &quot;\0&quot;.ToCharArray()[0]) + (m % 29 &gt; 0 ? &quot;&quot; : &quot;\n&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            catch(Exception e)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ForegroundColor &#x3D; ConsoleColor.White;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        public static void Diamond()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;&quot;);</span><br><span class="line">            string outString &#x3D; &quot;*&quot;;&#x2F;&#x2F;输出的字</span><br><span class="line">            Console.ForegroundColor &#x3D; ConsoleColor.Blue;</span><br><span class="line">            for (int i &#x3D; 1; i &lt;&#x3D; 8; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int j &#x3D; 1; j &lt;&#x3D; 9; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (((i &#x3D;&#x3D; 1) &amp;&amp; ((j &#x3D;&#x3D; 5) || (j &#x3D;&#x3D; 1) || (j &#x3D;&#x3D; 9))) || ((i &gt;&#x3D; 4) &amp;&amp; ((j &lt;&#x3D; i - 3) || (j &gt;&#x3D; 13 - i))))</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.Write(&quot;  &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.Write(&quot; &quot; + outString);&#x2F;&#x2F;英文或是字符，符号输出方式</span><br><span class="line">                        &#x2F;&#x2F; Console.Write(outString);&#x2F;&#x2F;中文输出方式</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ForegroundColor &#x3D; ConsoleColor.White;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TCPClient</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;声明客户端对象</span><br><span class="line">        private static TcpClient client;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;创建Tcp客户端实例</span><br><span class="line">            client &#x3D; new TcpClient();</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;向服务端发送连接请求</span><br><span class="line">            client.Connect(IPAddress.Parse(&quot;127.0.0.1&quot;), 8000);</span><br><span class="line">            Console.WriteLine(&quot;与服务器连接成功&quot;);</span><br><span class="line">            NetworkStream stream &#x3D; client.GetStream();&#x2F;&#x2F;获取服务的创建的数据流对象</span><br><span class="line">            Class1 cle &#x3D; new Class1(stream);</span><br><span class="line">            Thread th1 &#x3D; new Thread(new ThreadStart(cle.ReadMsg));</span><br><span class="line">            th1.Start();</span><br><span class="line">            Thread th2 &#x3D; new Thread(new ThreadStart(cle.SendMsg));</span><br><span class="line">            th2.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace TCPClient</span><br><span class="line">&#123;</span><br><span class="line">    public class Class1</span><br><span class="line">    &#123;</span><br><span class="line">        NetworkStream stream;</span><br><span class="line">        public Class1(NetworkStream stream)</span><br><span class="line">        &#123;</span><br><span class="line">            this.stream &#x3D; stream;</span><br><span class="line">        &#125;</span><br><span class="line">        public void ReadMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            int i &#x3D; 1;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    byte[] FrontMsg &#x3D; new byte[3];</span><br><span class="line">                    stream.Read(FrontMsg, 0, 3);</span><br><span class="line">                    if (!(FrontMsg[0] &#x3D;&#x3D; 255 &amp;&amp; FrontMsg[1] &#x3D;&#x3D; 255 &amp;&amp; FrontMsg[2] &#x3D;&#x3D; 210))</span><br><span class="line">                    &#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        if (i &gt; 5) break;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;创建byte数组作为缓存区，接收客户端发送的数据</span><br><span class="line">                    byte[] buffer &#x3D; new byte[1024];</span><br><span class="line">                    &#x2F;&#x2F;从网络数据流读取数据，放置到buff数组</span><br><span class="line">                    stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">                    &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">                    string msg &#x3D; Encoding.Default.GetString(buffer);&#x2F;&#x2F;.TrimEnd(&#39;\0&#39;);</span><br><span class="line">                    &#x2F;&#x2F;替换空格</span><br><span class="line">                    msg &#x3D; msg.Replace(&quot;\0&quot;, &quot;&quot;);&#x2F;&#x2F;.Trim();</span><br><span class="line">                    Console.WriteLine(msg);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e.Message);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public void SendMsg()</span><br><span class="line">        &#123;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                    string msg &#x3D; Console.ReadLine();</span><br><span class="line">                    &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                    byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line">                    &#x2F;&#x2F;定义一个新的字节数组大小为消息大小加上消息头尾的大小</span><br><span class="line">                    byte[] buffer &#x3D; new byte[data.Length + 3];</span><br><span class="line">                    buffer[0] &#x3D; 255;</span><br><span class="line">                    buffer[1] &#x3D; 255;</span><br><span class="line">                    buffer[2] &#x3D; 210;</span><br><span class="line">                    &#x2F;&#x2F;块复制</span><br><span class="line">                    Buffer.BlockCopy(data,0,buffer,3,data.Length);</span><br><span class="line">                    &#x2F;&#x2F;将缓存区数据写入网络数据流</span><br><span class="line">                    stream.Write(buffer, 0, buffer.Length);</span><br><span class="line">                &#125;</span><br><span class="line">                catch (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e.Message);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="完善客户端退出机制"><a href="#完善客户端退出机制" class="headerlink" title="完善客户端退出机制"></a>完善客户端退出机制</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;客户端退出协议</span><br><span class="line">              &#x2F;&#x2F;if (buffer[3] &#x3D;&#x3D; 48 &amp;&amp; buffer[4] &#x3D;&#x3D; 48 &amp;&amp; buffer[5] &#x3D;&#x3D; 48) </span><br><span class="line">              &#x2F;&#x2F;&#123;</span><br><span class="line">              &#x2F;&#x2F;    Console.WriteLine(client.RemoteEndPoint+&quot;\t断开连接&quot;);</span><br><span class="line">              &#x2F;&#x2F;    break;</span><br><span class="line">              &#x2F;&#x2F;&#125;</span><br><span class="line">              &#x2F;&#x2F;将字节数组转换为字符串                   </span><br><span class="line">              string msg &#x3D; Encoding.Default.GetString(buffer);&#x2F;&#x2F;.TrimEnd(&#39;\0&#39;);</span><br><span class="line">              &#x2F;&#x2F;替换空格</span><br><span class="line">              msg &#x3D; msg.Replace(&quot;\0&quot;, &quot;&quot;);&#x2F;&#x2F;.Trim();</span><br><span class="line">              &#x2F;&#x2F;协议判断</span><br><span class="line">              switch (msg)</span><br><span class="line">              &#123;</span><br><span class="line">                  case &quot;000&quot;:</span><br><span class="line">                      Console.WriteLine(client.RemoteEndPoint + &quot;\t断开连接&quot;);</span><br><span class="line">                      IsConnent &#x3D; false;&#x2F;&#x2F;退出发送消息</span><br><span class="line">                      return;&#x2F;&#x2F;退出接收消息</span><br><span class="line">                  case &quot;heart&quot;:</span><br><span class="line">                      Draw.Heart();</span><br><span class="line">                      break;</span><br><span class="line">                  case &quot;diamond&quot;:</span><br><span class="line">                      Draw.Diamond();</span><br><span class="line">                      break;</span><br><span class="line">                  default:</span><br><span class="line">                      Console.WriteLine(msg);</span><br><span class="line">                      Console.WriteLine(DateTime.Now);</span><br><span class="line">                      break;</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p>（1）Abort结束线程</p><p>（2）模拟控制台输入</p><h5 id="发送消息机制的拓展"><a href="#发送消息机制的拓展" class="headerlink" title="发送消息机制的拓展"></a>发送消息机制的拓展</h5><h6 id="发送方每次发送消息都分2次发送，第一次发送数据长度，第二次发送消息本身"><a href="#发送方每次发送消息都分2次发送，第一次发送数据长度，第二次发送消息本身" class="headerlink" title="发送方每次发送消息都分2次发送，第一次发送数据长度，第二次发送消息本身"></a>发送方每次发送消息都分2次发送，第一次发送数据长度，第二次发送消息本身</h6><h6 id="1）接收方"><a href="#1）接收方" class="headerlink" title="(1）接收方"></a>(1）接收方</h6><p>定义一个变量，用来储存接收消息的次数</p><p>定义一个变量，储存接收数据的长度</p><p>开始接收数据，判断接收次数是否为奇数，为奇数接收的为消息长度</p><p>若为偶数，则接收消息本体</p><h5 id="消息尾的发送和判断"><a href="#消息尾的发送和判断" class="headerlink" title="消息尾的发送和判断"></a>消息尾的发送和判断</h5><h6 id="改进后的发送"><a href="#改进后的发送" class="headerlink" title="改进后的发送"></a>改进后的发送</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">while (IsConnent)</span><br><span class="line">           &#123;</span><br><span class="line">               try</span><br><span class="line">               &#123;</span><br><span class="line">                   &#x2F;&#x2F;输入要发送的信息</span><br><span class="line">                   string msg &#x3D; Console.ReadLine();</span><br><span class="line">                   &#x2F;&#x2F;转化为字节数组,放到data缓存区</span><br><span class="line">                   byte[] data &#x3D; Encoding.Default.GetBytes(msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   int length &#x3D; data.Length;</span><br><span class="line">                   &#x2F;&#x2F;长度值转化为string再转化为字节数组</span><br><span class="line">                   byte[] data1 &#x3D; Encoding.Default.GetBytes(length.ToString());</span><br><span class="line">                   &#x2F;&#x2F;创建消息长度字节数组，大小为消息体加上消息头尾</span><br><span class="line">                   byte[] buffer &#x3D; new byte[data1.Length + 3];</span><br><span class="line">                   &#x2F;&#x2F;设置消息头</span><br><span class="line">                   buffer[0] &#x3D; 255;</span><br><span class="line">                   buffer[1] &#x3D; 255;</span><br><span class="line">                   buffer[2] &#x3D; 210;</span><br><span class="line">                   &#x2F;&#x2F;块复制</span><br><span class="line">                   Buffer.BlockCopy(data1, 0, buffer, 3, data1.Length);</span><br><span class="line">                   &#x2F;&#x2F;发送消息体长度</span><br><span class="line">                   stream.Write(buffer, 0, buffer.Length);</span><br><span class="line">                   &#x2F;&#x2F;创建消息本体数组</span><br><span class="line">                   buffer &#x3D; new byte[data.Length + 6];</span><br><span class="line">                   &#x2F;&#x2F;设置消息头和尾</span><br><span class="line">                   buffer[0] &#x3D; 255;</span><br><span class="line">                   buffer[1] &#x3D; 255;</span><br><span class="line">                   buffer[2] &#x3D; 210;</span><br><span class="line">                   buffer[buffer.Length - 3] &#x3D; 101;</span><br><span class="line">                   buffer[buffer.Length - 2] &#x3D; 105;</span><br><span class="line">                   buffer[buffer.Length - 1] &#x3D; 95;</span><br><span class="line">                   &#x2F;&#x2F;复制到buffer</span><br><span class="line">                   Buffer.BlockCopy(data, 0, buffer, 3, data.Length);</span><br><span class="line">                   &#x2F;&#x2F;发送消息体</span><br><span class="line">                   stream.Write(buffer, 0, buffer.Length);</span><br><span class="line">               &#125;</span><br><span class="line">               catch (Exception e)</span><br><span class="line">               &#123;</span><br><span class="line">                   Console.WriteLine(e.Message);</span><br><span class="line">                   break;</span><br><span class="line">               &#125;            </span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><h6 id="改进后的接收"><a href="#改进后的接收" class="headerlink" title="改进后的接收"></a>改进后的接收</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">int ReceivedMsgCount &#x3D; 1;&#x2F;&#x2F;接收消息的次数</span><br><span class="line">int MsgLength &#x3D; 0;&#x2F;&#x2F;接收消息的长度</span><br><span class="line">string msg;&#x2F;&#x2F;消息</span><br><span class="line">while (IsConnent)</span><br><span class="line">&#123;</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;声明一个用来接收所有数据的数组</span><br><span class="line">        byte[] buffer;</span><br><span class="line">        &#x2F;&#x2F;声明一个接收正文数组</span><br><span class="line">        byte[] data;</span><br><span class="line">        if (ReceivedMsgCount % 2 &#x3D;&#x3D; 1)&#x2F;&#x2F;接收次数是否为奇数，奇数则为长度值</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;接收的长度加上消息头的长度</span><br><span class="line">            buffer &#x3D; new byte[6+3];</span><br><span class="line">            &#x2F;&#x2F;接收</span><br><span class="line">            stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">            ReceivedMsgCount++;</span><br><span class="line">            &#x2F;&#x2F;判断消息头</span><br><span class="line">            if (!(buffer[0] &#x3D;&#x3D; 255 &amp;&amp; buffer[1] &#x3D;&#x3D; 255 &amp;&amp; buffer[2] &#x3D;&#x3D; 210))</span><br><span class="line">            &#123;</span><br><span class="line">                MsgLength &#x3D; 0;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;提取正文</span><br><span class="line">            data &#x3D; new byte[buffer.Length - 3];</span><br><span class="line">            &#x2F;&#x2F;复制到data数组</span><br><span class="line">            Buffer.BlockCopy(buffer, 3, data, 0, data.Length);</span><br><span class="line">            &#x2F;&#x2F;转化为整数</span><br><span class="line">            MsgLength &#x3D; Convert.ToInt32(Encoding.Default.GetString(data));</span><br><span class="line">        &#125;</span><br><span class="line">        else&#x2F;&#x2F;否则为消息体本体</span><br><span class="line">        &#123;</span><br><span class="line">            ReceivedMsgCount++;</span><br><span class="line">            if (MsgLength &#x3D;&#x3D; 0) continue;</span><br><span class="line">            &#x2F;&#x2F;重创数组接收消息体</span><br><span class="line">            buffer &#x3D; new byte[MsgLength+6];</span><br><span class="line">            &#x2F;&#x2F;读取消息体</span><br><span class="line">            stream.Read(buffer, 0, buffer.Length);</span><br><span class="line">            if (!(buffer[0] &#x3D;&#x3D; 255 &amp;&amp; buffer[1] &#x3D;&#x3D; 255 &amp;&amp; buffer[2] &#x3D;&#x3D; 210))&#x2F;&#x2F;判断消息头</span><br><span class="line">            &#123;</span><br><span class="line">                MsgLength &#x3D; 0;&#x2F;&#x2F;不合法，长度归零</span><br><span class="line">                continue;&#x2F;&#x2F;进入下次循环</span><br><span class="line">            &#125;</span><br><span class="line">            if (!(buffer[buffer.Length - 3] &#x3D;&#x3D; 101 &amp;&amp; buffer[buffer.Length - 2] &#x3D;&#x3D; 105 &amp;&amp; buffer[buffer.Length - 1] &#x3D;&#x3D; 95))&#x2F;&#x2F;判断消息尾</span><br><span class="line">            &#123;</span><br><span class="line">                MsgLength &#x3D; 0;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;创建消息正文数组</span><br><span class="line">            data &#x3D; new byte[buffer.Length - 6];</span><br><span class="line">            &#x2F;&#x2F;复制消息正文到数组data</span><br><span class="line">            Buffer.BlockCopy(buffer, 3, data, 0, data.Length);</span><br><span class="line">            msg &#x3D; Encoding.Default.GetString(data);</span><br><span class="line">            Console.WriteLine(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    catch (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(e.Message);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>消息发送接收机制</p><p>发送方分两次发送消息，第一次发送消息的长度，第二次发送消息本体</p><p>接收方判断接收次数，判断接收消息长度和消息本体</p><h5 id="协议的改造"><a href="#协议的改造" class="headerlink" title="协议的改造"></a>协议的改造</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写一个通信小项目（1）&quot;&gt;&lt;a href=&quot;#写一个通信小项目（1）&quot; class=&quot;headerlink&quot; title=&quot;写一个通信小项目（1）&quot;&gt;&lt;/a&gt;写一个通信小项目（1）&lt;/h1&gt;&lt;h3 id=&quot;课堂练习&quot;&gt;&lt;a href=&quot;#课堂练习&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C#基础语法</title>
    <link href="http://yoursite.com/2020/03/24/C#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/24/C#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-03-24T11:03:47.000Z</published>
    <updated>2020-03-24T11:14:14.983Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 单行注释以 &#x2F;&#x2F; 开始</span><br><span class="line">&#x2F;*</span><br><span class="line">多行注释是这样的</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; XML文档注释</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 声明应用用到的命名空间</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Data.Entity;</span><br><span class="line">using System.Dynamic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Linq.Expressions;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.IO;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义作用域，将代码组织成包</span><br><span class="line">namespace Learning</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 每个 .cs 文件至少需要包含一个和文件名相同的类</span><br><span class="line">    &#x2F;&#x2F; 可以不干，但是不好</span><br><span class="line">    public class LearnCSharp</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 基本语法 -  如果你以前用过 Java 或 C++ 的话，可以直接跳到后文「有趣的特性」</span><br><span class="line">        public static void Syntax() </span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 使用 Console.WriteLine 打印信息</span><br><span class="line">            Console.WriteLine(&quot;Hello World&quot;);</span><br><span class="line">            Console.WriteLine(</span><br><span class="line">                &quot;Integer: &quot; + 10 +</span><br><span class="line">                &quot; Double: &quot; + 3.14 +</span><br><span class="line">                &quot; Boolean: &quot; + true);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 使用 Console.Write 打印，不带换行符号</span><br><span class="line">            Console.Write(&quot;Hello &quot;);</span><br><span class="line">            Console.Write(&quot;World&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 类型和变量</span><br><span class="line">            &#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 使用 &lt;type&gt; &lt;name&gt; 定义变量</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Sbyte - 有符号 8-bit 整数</span><br><span class="line">            &#x2F;&#x2F; (-128 &lt;&#x3D; sbyte &lt;&#x3D; 127)</span><br><span class="line">            sbyte fooSbyte &#x3D; 100;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Byte - 无符号 8-bit 整数</span><br><span class="line">            &#x2F;&#x2F; (0 &lt;&#x3D; byte &lt;&#x3D; 255)</span><br><span class="line">            byte fooByte &#x3D; 100;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Short - 16-bit 整数</span><br><span class="line">            &#x2F;&#x2F; 有符号 - (-32,768 &lt;&#x3D; short &lt;&#x3D; 32,767)</span><br><span class="line">            &#x2F;&#x2F; 无符号 - (0 &lt;&#x3D; ushort &lt;&#x3D; 65,535)</span><br><span class="line">            short fooShort &#x3D; 10000;</span><br><span class="line">            ushort fooUshort &#x3D; 10000;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Integer - 32-bit 整数</span><br><span class="line">            int fooInt &#x3D; 1; &#x2F;&#x2F; (-2,147,483,648 &lt;&#x3D; int &lt;&#x3D; 2,147,483,647)</span><br><span class="line">            uint fooUint &#x3D; 1; &#x2F;&#x2F; (0 &lt;&#x3D; uint &lt;&#x3D; 4,294,967,295)</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Long - 64-bit 整数</span><br><span class="line">            long fooLong &#x3D; 100000L; &#x2F;&#x2F; (-9,223,372,036,854,775,808 &lt;&#x3D; long &lt;&#x3D; 9,223,372,036,854,775,807)</span><br><span class="line">            ulong fooUlong &#x3D; 100000L; &#x2F;&#x2F; (0 &lt;&#x3D; ulong &lt;&#x3D; 18,446,744,073,709,551,615)</span><br><span class="line">            &#x2F;&#x2F; 数字默认为 int 或 uint （取决于尺寸）</span><br><span class="line">            &#x2F;&#x2F; 使用 L 标明变量值类型为long 或 ulong</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Double - 双精度 64-bit IEEE 754 浮点数</span><br><span class="line">            double fooDouble &#x3D; 123.4; &#x2F;&#x2F; 精度: 15-16 位</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Float - 单精度 32-bit IEEE 754 浮点数</span><br><span class="line">            float fooFloat &#x3D; 234.5f; &#x2F;&#x2F; 精度: 7 位</span><br><span class="line">            &#x2F;&#x2F; 使用 f 标明变量值类型为float</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Decimal - 128-bits 数据类型，比其他浮点类型精度更高</span><br><span class="line">            &#x2F;&#x2F; 适合财务、金融</span><br><span class="line">            decimal fooDecimal &#x3D; 150.3m;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 布尔值 - true &amp; false</span><br><span class="line">            bool fooBoolean &#x3D; true; &#x2F;&#x2F; 或 false</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Char - 单个 16-bit Unicode 字符</span><br><span class="line">            char fooChar &#x3D; &#39;A&#39;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 字符串 -- 和前面的基本类型不同，字符串不是值，而是引用。</span><br><span class="line">            &#x2F;&#x2F; 这意味着你可以将字符串设为null。</span><br><span class="line">            string fooString &#x3D; &quot;\&quot;escape\&quot; quotes and add \n (new lines) and \t (tabs)&quot;;</span><br><span class="line">            Console.WriteLine(fooString);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 你可以通过索引访问字符串的每个字符：</span><br><span class="line">            char charFromString &#x3D; fooString[1]; &#x2F;&#x2F; &#x3D;&gt; &#39;e&#39;</span><br><span class="line">            &#x2F;&#x2F; 字符串不可修改:  fooString[1] &#x3D; &#39;X&#39; 是行不通的;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 根据当前的locale设定比较字符串，大小写不敏感</span><br><span class="line">            string.Compare(fooString, &quot;x&quot;, StringComparison.CurrentCultureIgnoreCase);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 基于sprintf的字符串格式化</span><br><span class="line">            string fooFs &#x3D; string.Format(&quot;Check Check, &#123;0&#125; &#123;1&#125;, &#123;0&#125; &#123;1:0.0&#125;&quot;, 1, 2);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 日期和格式</span><br><span class="line">            DateTime fooDate &#x3D; DateTime.Now;</span><br><span class="line">            Console.WriteLine(fooDate.ToString(&quot;hh:mm, dd MMM yyyy&quot;));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 使用 @  符号可以创建跨行的字符串。使用 &quot;&quot; 来表示 &quot;</span><br><span class="line">            string bazString &#x3D; @&quot;Here&#39;s some stuff</span><br><span class="line">on a new line! &quot;&quot;Wow!&quot;&quot;, the masses cried&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 使用const或read-only定义常量</span><br><span class="line">            &#x2F;&#x2F; 常量在编译期演算</span><br><span class="line">            const int HOURS_I_WORK_PER_WEEK &#x3D; 9001;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 数据结构</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 数组 - 从0开始计数</span><br><span class="line">            &#x2F;&#x2F; 声明数组时需要确定数组长度</span><br><span class="line">            &#x2F;&#x2F; 声明数组的格式如下：</span><br><span class="line">            &#x2F;&#x2F; &lt;datatype&gt;[] &lt;var name&gt; &#x3D; new &lt;datatype&gt;[&lt;array size&gt;];</span><br><span class="line">            int[] intArray &#x3D; new int[10];</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 声明并初始化数组的其他方式：</span><br><span class="line">            int[] y &#x3D; &#123; 9000, 1000, 1337 &#125;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 访问数组的元素</span><br><span class="line">            Console.WriteLine(&quot;intArray @ 0: &quot; + intArray[0]);</span><br><span class="line">            &#x2F;&#x2F; 数组可以修改</span><br><span class="line">            intArray[1] &#x3D; 1;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 列表</span><br><span class="line">            &#x2F;&#x2F; 列表比数组更常用，因为列表更灵活。</span><br><span class="line">            &#x2F;&#x2F; 声明列表的格式如下：</span><br><span class="line">            &#x2F;&#x2F; List&lt;datatype&gt; &lt;var name&gt; &#x3D; new List&lt;datatype&gt;();</span><br><span class="line">            List&lt;int&gt; intList &#x3D; new List&lt;int&gt;();</span><br><span class="line">            List&lt;string&gt; stringList &#x3D; new List&lt;string&gt;();</span><br><span class="line">            List&lt;int&gt; z &#x3D; new List&lt;int&gt; &#123; 9000, 1000, 1337 &#125;; &#x2F;&#x2F; i</span><br><span class="line">            &#x2F;&#x2F; &lt;&gt;用于泛型 - 参考下文</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 列表无默认值</span><br><span class="line">            &#x2F;&#x2F; 访问列表元素时必须首先添加元素</span><br><span class="line">            intList.Add(1);</span><br><span class="line">            Console.WriteLine(&quot;intList @ 0: &quot; + intList[0]);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 其他数据结构：</span><br><span class="line">            &#x2F;&#x2F; 堆栈&#x2F;队列</span><br><span class="line">            &#x2F;&#x2F; 字典 (哈希表的实现)</span><br><span class="line">            &#x2F;&#x2F; 哈希集合</span><br><span class="line">            &#x2F;&#x2F; 只读集合</span><br><span class="line">            &#x2F;&#x2F; 元组 (.Net 4+)</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 操作符</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            Console.WriteLine(&quot;\n-&gt;Operators&quot;);</span><br><span class="line"></span><br><span class="line">            int i1 &#x3D; 1, i2 &#x3D; 2; &#x2F;&#x2F; 多重声明的简写形式</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 算术直接输出</span><br><span class="line">            Console.WriteLine(i1 + i2 - i1 * 3 &#x2F; 7); &#x2F;&#x2F; &#x3D;&gt; 3</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 取余</span><br><span class="line">            Console.WriteLine(&quot;11%3 &#x3D; &quot; + (11 % 3)); &#x2F;&#x2F; &#x3D;&gt; 2</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 比较操作符</span><br><span class="line">            Console.WriteLine(&quot;3 &#x3D;&#x3D; 2? &quot; + (3 &#x3D;&#x3D; 2)); &#x2F;&#x2F; &#x3D;&gt; false</span><br><span class="line">            Console.WriteLine(&quot;3 !&#x3D; 2? &quot; + (3 !&#x3D; 2)); &#x2F;&#x2F; &#x3D;&gt; true</span><br><span class="line">            Console.WriteLine(&quot;3 &gt; 2? &quot; + (3 &gt; 2)); &#x2F;&#x2F; &#x3D;&gt; true</span><br><span class="line">            Console.WriteLine(&quot;3 &lt; 2? &quot; + (3 &lt; 2)); &#x2F;&#x2F; &#x3D;&gt; false</span><br><span class="line">            Console.WriteLine(&quot;2 &lt;&#x3D; 2? &quot; + (2 &lt;&#x3D; 2)); &#x2F;&#x2F; &#x3D;&gt; true</span><br><span class="line">            Console.WriteLine(&quot;2 &gt;&#x3D; 2? &quot; + (2 &gt;&#x3D; 2)); &#x2F;&#x2F; &#x3D;&gt; true</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 位操作符</span><br><span class="line">            &#x2F;*</span><br><span class="line">            ~       取反</span><br><span class="line">            &lt;&lt;      左移（有符号）</span><br><span class="line">            &gt;&gt;      右移（有符号）</span><br><span class="line">            &amp;       与</span><br><span class="line">            ^       异或</span><br><span class="line">            |       或</span><br><span class="line">            *&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 自增、自减</span><br><span class="line">            int i &#x3D; 0;</span><br><span class="line">            Console.WriteLine(&quot;\n-&gt;Inc&#x2F;Dec-rementation&quot;);</span><br><span class="line">            Console.WriteLine(i++); &#x2F;&#x2F;i &#x3D; 1. 事后自增</span><br><span class="line">            Console.WriteLine(++i); &#x2F;&#x2F;i &#x3D; 2. 事先自增</span><br><span class="line">            Console.WriteLine(i--); &#x2F;&#x2F;i &#x3D; 1. 事后自减</span><br><span class="line">            Console.WriteLine(--i); &#x2F;&#x2F;i &#x3D; 0. 事先自减</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 控制结构</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            Console.WriteLine(&quot;\n-&gt;Control Structures&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 类似C的if语句</span><br><span class="line">            int j &#x3D; 10;</span><br><span class="line">            if (j &#x3D;&#x3D; 10)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;I get printed&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (j &gt; 10)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;I don&#39;t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;I also don&#39;t&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 三元（目）表达式</span><br><span class="line">            &#x2F;&#x2F; 简单的 if&#x2F;else 语句可以写成：</span><br><span class="line">            &#x2F;&#x2F; &lt;条件&gt; ? &lt;真&gt; : &lt;假&gt;</span><br><span class="line">            int toCompare &#x3D; 17;</span><br><span class="line">            string isTrue &#x3D; toCompare &#x3D;&#x3D; 17 ? &quot;True&quot; : &quot;False&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; While 循环</span><br><span class="line">            int fooWhile &#x3D; 0;</span><br><span class="line">            while (fooWhile &lt; 100)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;迭代 100 次, fooWhile 0-&gt;99</span><br><span class="line">                fooWhile++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; do While 循环</span><br><span class="line">            int fooDoWhile &#x3D; 0;</span><br><span class="line">            do</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;迭代 100 次, fooDoWhile 0-&gt;99</span><br><span class="line">                fooDoWhile++;</span><br><span class="line">            &#125; while (fooDoWhile &lt; 100);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;for 循环结构 &#x3D;&gt; for(&lt;初始条件&gt;; &lt;循环条件&gt;; &lt;循环操作（步骤）&gt;)</span><br><span class="line">            for (int fooFor &#x3D; 0; fooFor &lt; 10; fooFor++)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;迭代10次, fooFor 0-&gt;9</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; foreach循环</span><br><span class="line">            &#x2F;&#x2F; foreach 循环结构 &#x3D;&gt; foreach(&lt;迭代器类型&gt; &lt;迭代器&gt; in &lt;可枚举结构&gt;)</span><br><span class="line">            &#x2F;&#x2F; foreach 循环适用于任何实现了 IEnumerable 或 IEnumerable&lt;T&gt; 的对象。</span><br><span class="line">            &#x2F;&#x2F; .Net 框架下的集合类型(数组, 列表, 字典...)</span><br><span class="line">            &#x2F;&#x2F; 都实现了这些接口</span><br><span class="line">            &#x2F;&#x2F; (下面的代码中，ToCharArray()可以删除，因为字符串同样实现了IEnumerable)</span><br><span class="line">            foreach (char character in &quot;Hello World&quot;.ToCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;迭代字符串中的所有字符</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Switch 语句</span><br><span class="line">            &#x2F;&#x2F; switch 适用于 byte、short、char和int 数据类型。</span><br><span class="line">            &#x2F;&#x2F; 同样适用于可枚举的类型</span><br><span class="line">            &#x2F;&#x2F; 包括字符串类, 以及一些封装了原始值的类：</span><br><span class="line">            &#x2F;&#x2F; Character、Byte、Short和Integer。</span><br><span class="line">            int month &#x3D; 3;</span><br><span class="line">            string monthString;</span><br><span class="line">            switch (month)</span><br><span class="line">            &#123;</span><br><span class="line">                case 1:</span><br><span class="line">                    monthString &#x3D; &quot;January&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case 2:</span><br><span class="line">                    monthString &#x3D; &quot;February&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                case 3:</span><br><span class="line">                    monthString &#x3D; &quot;March&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                &#x2F;&#x2F; 你可以一次匹配多个case语句</span><br><span class="line">                &#x2F;&#x2F; 但是你在添加case语句后需要使用break</span><br><span class="line">                &#x2F;&#x2F; （否则你需要显式地使用goto case x语句）</span><br><span class="line">                case 6:</span><br><span class="line">                case 7:</span><br><span class="line">                case 8:</span><br><span class="line">                    monthString &#x3D; &quot;Summer time!!&quot;;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    monthString &#x3D; &quot;Some other month&quot;;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">            &#x2F;&#x2F; 转换、指定数据类型</span><br><span class="line">            &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转换类型</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转换字符串为整数</span><br><span class="line">            &#x2F;&#x2F; 转换失败会抛出异常</span><br><span class="line">            int.Parse(&quot;123&quot;);&#x2F;&#x2F;返回整数类型的&quot;123&quot;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; TryParse会尝试转换类型，失败时会返回缺省类型</span><br><span class="line">            &#x2F;&#x2F; 例如 0</span><br><span class="line">            int tryInt;</span><br><span class="line">            if (int.TryParse(&quot;123&quot;, out tryInt)) &#x2F;&#x2F; Funciton is boolean</span><br><span class="line">                Console.WriteLine(tryInt);       &#x2F;&#x2F; 123</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 转换整数为字符串</span><br><span class="line">            &#x2F;&#x2F; Convert类提供了一系列便利转换的方法</span><br><span class="line">            Convert.ToString(123);</span><br><span class="line">            &#x2F;&#x2F; or</span><br><span class="line">            tryInt.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">        &#x2F;&#x2F; 类</span><br><span class="line">        &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line">        public static void Classes()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 参看文件尾部的对象声明</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 使用new初始化对象</span><br><span class="line">            Bicycle trek &#x3D; new Bicycle();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 调用对象的方法</span><br><span class="line">            trek.SpeedUp(3); &#x2F;&#x2F; 你应该一直使用setter和getter方法</span><br><span class="line">            trek.Cadence &#x3D; 100;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 查看对象的信息.</span><br><span class="line">            Console.WriteLine(&quot;trek info: &quot; + trek.Info());</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 实例化一个新的Penny Farthing</span><br><span class="line">            PennyFarthing funbike &#x3D; new PennyFarthing(1, 10);</span><br><span class="line">            Console.WriteLine(&quot;funbike info: &quot; + funbike.Info());</span><br><span class="line"></span><br><span class="line">            Console.Read();</span><br><span class="line">        &#125; &#x2F;&#x2F; 结束main方法</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 终端程序 终端程序必须有一个main方法作为入口</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            OtherInterestingFeatures();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">        &#x2F;&#x2F; 有趣的特性</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 默认方法签名</span><br><span class="line"></span><br><span class="line">        public &#x2F;&#x2F; 可见性</span><br><span class="line">        static &#x2F;&#x2F; 允许直接调用类，无需先创建实例</span><br><span class="line">        int, &#x2F;&#x2F;返回值</span><br><span class="line">        MethodSignatures(</span><br><span class="line">            int maxCount, &#x2F;&#x2F; 第一个变量，类型为整型</span><br><span class="line">            int count &#x3D; 0, &#x2F;&#x2F; 如果没有传入值，则缺省值为0</span><br><span class="line">            int another &#x3D; 3,</span><br><span class="line">            params string[] otherParams &#x2F;&#x2F; 捕获其他参数</span><br><span class="line">        )</span><br><span class="line">        &#123; </span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 方法可以重名，只要签名不一样</span><br><span class="line">        public static void MethodSignature(string maxCount)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;泛型</span><br><span class="line">        &#x2F;&#x2F; TKey和TValue类由用用户调用函数时指定。</span><br><span class="line">        &#x2F;&#x2F; 以下函数模拟了Python的SetDefault</span><br><span class="line">        public static TValue SetDefault&lt;TKey, TValue&gt;(</span><br><span class="line">            IDictionary&lt;TKey, TValue&gt; dictionary, </span><br><span class="line">            TKey key, </span><br><span class="line">            TValue defaultItem)</span><br><span class="line">        &#123;</span><br><span class="line">            TValue result;</span><br><span class="line">            if (!dictionary.TryGetValue(key, out result))</span><br><span class="line">                return dictionary[key] &#x3D; defaultItem;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 你可以限定传入值的范围</span><br><span class="line">        public static void IterateAndPrint&lt;T&gt;(T toPrint) where T: IEnumerable&lt;int&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 我们可以进行迭代，因为T是可枚举的</span><br><span class="line">            foreach (var item in toPrint)</span><br><span class="line">                &#x2F;&#x2F; ittm为整数</span><br><span class="line">                Console.WriteLine(item.ToString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void OtherInterestingFeatures()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 可选参数  </span><br><span class="line">            MethodSignatures(3, 1, 3, &quot;Some&quot;, &quot;Extra&quot;, &quot;Strings&quot;);</span><br><span class="line">            MethodSignatures(3, another: 3); &#x2F;&#x2F; 显式指定参数，忽略可选参数</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 扩展方法</span><br><span class="line">            int i &#x3D; 3;</span><br><span class="line">            i.Print(); &#x2F;&#x2F; 参见下面的定义 </span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 可为null的类型 对数据库交互、返回值很有用</span><br><span class="line">            &#x2F;&#x2F; 任何值类型 (i.e. 不为类) 添加后缀 ? 后会变为可为null的值</span><br><span class="line">            &#x2F;&#x2F; &lt;类型&gt;? &lt;变量名&gt; &#x3D; &lt;值&gt;</span><br><span class="line">            int? nullable &#x3D; null; &#x2F;&#x2F; Nullable&lt;int&gt; 的简写形式</span><br><span class="line">            Console.WriteLine(&quot;Nullable variable: &quot; + nullable);</span><br><span class="line">            bool hasValue &#x3D; nullable.HasValue; &#x2F;&#x2F; 不为null时返回真</span><br><span class="line">            &#x2F;&#x2F; ?? 是用于指定默认值的语法糖</span><br><span class="line">            &#x2F;&#x2F; 以防变量为null的情况</span><br><span class="line">            int notNullable &#x3D; nullable ?? 0; &#x2F;&#x2F; 0</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 变量类型推断 - 你可以让编译器推断变量类型:</span><br><span class="line">            var magic &#x3D; &quot;编译器确定magic是一个字符串，所以仍然是类型安全的&quot;;</span><br><span class="line">            &#x2F;&#x2F; magic &#x3D; 9; &#x2F;&#x2F; 不工作，因为magic是字符串，而不是整数。 </span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 泛型</span><br><span class="line">            &#x2F;&#x2F;</span><br><span class="line">            var phonebook &#x3D; new Dictionary&lt;string, string&gt;() &#123; </span><br><span class="line">                &#123;&quot;Sarah&quot;, &quot;212 555 5555&quot;&#125; &#x2F;&#x2F; 在电话簿中加入新条目</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 调用上面定义为泛型的SETDEFAULT</span><br><span class="line">            Console.WriteLine(SetDefault&lt;string,string&gt;(phonebook, &quot;Shaun&quot;, &quot;No Phone&quot;)); &#x2F;&#x2F; 没有电话</span><br><span class="line">            &#x2F;&#x2F; 你不用指定TKey、TValue，因为它们会被隐式地推导出来</span><br><span class="line">            Console.WriteLine(SetDefault(phonebook, &quot;Sarah&quot;, &quot;No Phone&quot;)); &#x2F;&#x2F; 212 555 5555</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; lambda表达式 - 允许你用一行代码搞定函数</span><br><span class="line">            Func&lt;int, int&gt; square &#x3D; (x) &#x3D;&gt; x * x; &#x2F;&#x2F; 最后一项为返回值</span><br><span class="line">            Console.WriteLine(square(3)); &#x2F;&#x2F; 9</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 可抛弃的资源管理 - 让你很容易地处理未管理的资源</span><br><span class="line">            &#x2F;&#x2F; 大多数访问未管理资源 (文件操作符、设备上下文, etc.)的对象</span><br><span class="line">            &#x2F;&#x2F; 都实现了IDisposable接口。 </span><br><span class="line">            &#x2F;&#x2F; using语句会为你清理IDisposable对象。</span><br><span class="line">            using (StreamWriter writer &#x3D; new StreamWriter(&quot;log.txt&quot;))</span><br><span class="line">            &#123;</span><br><span class="line">                writer.WriteLine(&quot;这里没有什么可疑的东西&quot;);</span><br><span class="line">                &#x2F;&#x2F; 在作用域的结尾，资源会被回收</span><br><span class="line">                &#x2F;&#x2F; （即使有异常抛出，也一样会回收）</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 并行框架</span><br><span class="line">            &#x2F;&#x2F; http:&#x2F;&#x2F;blogs.msdn.com&#x2F;b&#x2F;csharpfaq&#x2F;archive&#x2F;2010&#x2F;06&#x2F;01&#x2F;parallel-programming-in-net-framework-4-getting-started.aspx</span><br><span class="line">            var websites &#x3D; new string[] &#123; </span><br><span class="line">                &quot;http:&#x2F;&#x2F;www.google.com&quot;, &quot;http:&#x2F;&#x2F;www.reddit.com&quot;, </span><br><span class="line">                &quot;http:&#x2F;&#x2F;www.shaunmccarthy.com&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            var responses &#x3D; new Dictionary&lt;string, string&gt;();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 为每个请求新开一个线程</span><br><span class="line">            &#x2F;&#x2F; 在运行下一步前合并结果</span><br><span class="line">            Parallel.ForEach(websites, </span><br><span class="line">                new ParallelOptions() &#123;MaxDegreeOfParallelism &#x3D; 3&#125;, &#x2F;&#x2F; max of 3 threads</span><br><span class="line">                website &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; Do something that takes a long time on the file</span><br><span class="line">                using (var r &#x3D; WebRequest.Create(new Uri(website)).GetResponse())</span><br><span class="line">                &#123;</span><br><span class="line">                    responses[website] &#x3D; r.ContentType;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 直到所有的请求完成后才会运行下面的代码</span><br><span class="line">            foreach (var key in responses.Keys)</span><br><span class="line">                Console.WriteLine(&quot;&#123;0&#125;:&#123;1&#125;&quot;, key, responses[key]);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 动态对象（配合其他语言使用很方便）</span><br><span class="line">            dynamic student &#x3D; new ExpandoObject();</span><br><span class="line">            student.FirstName &#x3D; &quot;First Name&quot;; &#x2F;&#x2F; 不需要先定义类！</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 你甚至可以添加方法（接受一个字符串，输出一个字符串）</span><br><span class="line">            student.Introduce &#x3D; new Func&lt;string, string&gt;(</span><br><span class="line">                (introduceTo) &#x3D;&gt; string.Format(&quot;Hey &#123;0&#125;, this is &#123;1&#125;&quot;, student.FirstName, introduceTo));</span><br><span class="line">            Console.WriteLine(student.Introduce(&quot;Beth&quot;));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; IQUERYABLE&lt;T&gt; - 几乎所有的集合都实现了它，</span><br><span class="line">            &#x2F;&#x2F; 带给你 Map &#x2F; Filter &#x2F; Reduce 风格的方法</span><br><span class="line">            var bikes &#x3D; new List&lt;Bicycle&gt;();</span><br><span class="line">            bikes.Sort(); &#x2F;&#x2F; Sorts the array</span><br><span class="line">            bikes.Sort((b1, b2) &#x3D;&gt; b1.Wheels.CompareTo(b2.Wheels)); &#x2F;&#x2F; 根据车轮数排序</span><br><span class="line">            var result &#x3D; bikes</span><br><span class="line">                .Where(b &#x3D;&gt; b.Wheels &gt; 3) &#x2F;&#x2F; 筛选 - 可以连锁使用 （返回IQueryable)</span><br><span class="line">                .Where(b &#x3D;&gt; b.IsBroken &amp;&amp; b.HasTassles)</span><br><span class="line">                .Select(b &#x3D;&gt; b.ToString()); &#x2F;&#x2F; Map - 这里我们使用了select，所以结果是IQueryable&lt;string&gt;</span><br><span class="line"></span><br><span class="line">            var sum &#x3D; bikes.Sum(b &#x3D;&gt; b.Wheels); &#x2F;&#x2F; Reduce - 计算集合中的轮子总数</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 创建一个包含基于自行车的一些参数生成的隐式对象的列表</span><br><span class="line">            var bikeSummaries &#x3D; bikes.Select(b&#x3D;&gt;new &#123; Name &#x3D; b.Name, IsAwesome &#x3D; !b.IsBroken &amp;&amp; b.HasTassles &#125;);</span><br><span class="line">            &#x2F;&#x2F; 很难演示，但是编译器在代码编译完成前就能推导出以上对象的类型</span><br><span class="line">            foreach (var bikeSummary in bikeSummaries.Where(b &#x3D;&gt; b.IsAwesome))</span><br><span class="line">                Console.WriteLine(bikeSummary.Name);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; ASPARALLEL</span><br><span class="line">            &#x2F;&#x2F; 特性 —— 组合了linq和并行操作</span><br><span class="line">            var threeWheelers &#x3D; bikes.AsParallel().Where(b &#x3D;&gt; b.Wheels &#x3D;&#x3D; 3).Select(b &#x3D;&gt; b.Name);</span><br><span class="line">            &#x2F;&#x2F; 以上代码会并发地运行。会自动新开线程，分别计算结果。</span><br><span class="line">            &#x2F;&#x2F; 适用于多核、大数据量的场景。</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; LINQ - 将IQueryable&lt;T&gt;映射到存储，延缓执行</span><br><span class="line">            &#x2F;&#x2F; 例如 LinqToSql 映射数据库, LinqToXml 映射XML文档</span><br><span class="line">            var db &#x3D; new BikeRespository();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 执行被延迟了，这对于查询数据库来说很好</span><br><span class="line">            var filter &#x3D; db.Bikes.Where(b &#x3D;&gt; b.HasTassles); &#x2F;&#x2F; 不运行查询</span><br><span class="line">            if (42 &gt; 6) &#x2F;&#x2F; 你可以不断地增加筛选，包括有条件的筛选，例如用于“高级搜索”功能</span><br><span class="line">                filter &#x3D; filter.Where(b &#x3D;&gt; b.IsBroken); &#x2F;&#x2F; 不运行查询 </span><br><span class="line"></span><br><span class="line">            var query &#x3D; filter</span><br><span class="line">                .OrderBy(b &#x3D;&gt; b.Wheels)</span><br><span class="line">                .ThenBy(b &#x3D;&gt; b.Name)</span><br><span class="line">                .Select(b &#x3D;&gt; b.Name); &#x2F;&#x2F; 仍然不运行查询</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 现在运行查询，运行查询的时候会打开一个读取器，所以你迭代的是一个副本</span><br><span class="line">            foreach (string bike in query) </span><br><span class="line">                Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; &#x2F;&#x2F; 结束LearnCSharp类</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 你可以在同一个 .cs 文件中包含其他类</span><br><span class="line"></span><br><span class="line">    public static class Extensions</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 扩展函数</span><br><span class="line">        public static void Print(this object obj)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(obj.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 声明类的语法：</span><br><span class="line">    &#x2F;&#x2F; &lt;public&#x2F;private&#x2F;protected&#x2F;internal&gt; class &lt;类名&gt;&#123;</span><br><span class="line">    &#x2F;&#x2F;    &#x2F;&#x2F;数据字段, 构造器, 内部函数.</span><br><span class="line">    &#x2F;     &#x2F;&#x2F; 在Java中函数被称为方法。</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">    public class Bicycle</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 自行车的字段、变量</span><br><span class="line">        public int Cadence &#x2F;&#x2F; Public: 任何地方都可以访问</span><br><span class="line">        &#123;</span><br><span class="line">            get &#x2F;&#x2F; get - 定义获取属性的方法</span><br><span class="line">            &#123;</span><br><span class="line">                return _cadence;</span><br><span class="line">            &#125;</span><br><span class="line">            set &#x2F;&#x2F; set - 定义设置属性的方法</span><br><span class="line">            &#123;</span><br><span class="line">                _cadence &#x3D; value; &#x2F;&#x2F; value是被传递给setter的值</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        private int _cadence;</span><br><span class="line"></span><br><span class="line">        protected virtual int Gear &#x2F;&#x2F; 类和子类可以访问</span><br><span class="line">        &#123;</span><br><span class="line">            get; &#x2F;&#x2F; 创建一个自动属性，无需成员字段</span><br><span class="line">            set;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        internal int Wheels &#x2F;&#x2F; Internal:在同一程序集内可以访问</span><br><span class="line">        &#123;</span><br><span class="line">            get;</span><br><span class="line">            private set; &#x2F;&#x2F; 可以给get&#x2F;set方法添加修饰符</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int _speed; &#x2F;&#x2F; 默认为private: 只可以在这个类内访问，你也可以使用&#96;private&#96;关键词</span><br><span class="line">        public string Name &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;枚举体</span><br><span class="line">        &#x2F;&#x2F; enum类型包含一组常量</span><br><span class="line">        &#x2F;&#x2F; 它将名称映射到值（除非特别说明，是一个整型）</span><br><span class="line">        &#x2F;&#x2F; enmu元素的类型可以是byte、sbyte、short、ushort、int、uint、long、ulong。</span><br><span class="line">        &#x2F;&#x2F; enum不能包含相同的值。</span><br><span class="line">        public enum BikeBrand</span><br><span class="line">        &#123;</span><br><span class="line">            AIST,</span><br><span class="line">            BMC,</span><br><span class="line">            Electra &#x3D; 42, &#x2F;&#x2F;你可以显式地赋值</span><br><span class="line">            Gitane &#x2F;&#x2F; 43</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 我们在Bicycle类中定义的这个类型，所以它是一个内嵌类型。</span><br><span class="line">        &#x2F;&#x2F; 这个类以外的代码应当使用&#96;Bicycle.Brand&#96;来引用。</span><br><span class="line"></span><br><span class="line">        public BikeBrand Brand; &#x2F;&#x2F; 声明一个enum类型之后，我们可以声明这个类型的字段</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 静态方法的类型为自身，不属于特定的对象。</span><br><span class="line">        &#x2F;&#x2F; 你无需引用对象就可以访问他们。</span><br><span class="line">        &#x2F;&#x2F; Console.WriteLine(&quot;Bicycles created: &quot; + Bicycle.bicyclesCreated);</span><br><span class="line">        static public int BicyclesCreated &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 只读值在运行时确定</span><br><span class="line">        &#x2F;&#x2F; 它们只能在声明或构造器内被赋值</span><br><span class="line">        readonly bool _hasCardsInSpokes &#x3D; false; &#x2F;&#x2F; read-only private</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;结构体</span><br><span class="line">        &#x2F;&#x2F; 构造器是创建类的一种方式</span><br><span class="line">        &#x2F;&#x2F; 下面是一个默认的构造器</span><br><span class="line">        public struct Bicycle() </span><br><span class="line">        &#123;</span><br><span class="line">            this.Gear &#x3D; 1; &#x2F;&#x2F; 你可以使用关键词this访问对象的成员</span><br><span class="line">            Cadence &#x3D; 50;  &#x2F;&#x2F; 不过你并不总是需要它</span><br><span class="line">            _speed &#x3D; 5;</span><br><span class="line">            Name &#x3D; &quot;Bontrager&quot;;</span><br><span class="line">            Brand &#x3D; BikeBrand.AIST;</span><br><span class="line">            BicyclesCreated++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 另一个构造器的例子（包含参数）</span><br><span class="line">        public Bicycle(int startCadence, int startSpeed, int startGear,</span><br><span class="line">                       string name, bool hasCardsInSpokes, BikeBrand brand) </span><br><span class="line">            : base() &#x2F;&#x2F; 首先调用base</span><br><span class="line">        &#123;</span><br><span class="line">            Gear &#x3D; startGear; </span><br><span class="line">            Cadence &#x3D; startCadence;</span><br><span class="line">            _speed &#x3D; startSpeed;</span><br><span class="line">            Name &#x3D; name; </span><br><span class="line">            _hasCardsInSpokes &#x3D; hasCardsInSpokes;</span><br><span class="line">            Brand &#x3D; brand;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 构造器可以连锁使用</span><br><span class="line">        public Bicycle(int startCadence, int startSpeed, BikeBrand brand) :</span><br><span class="line">            this(startCadence, startSpeed, 0, &quot;big wheels&quot;, true, brand)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 函数语法</span><br><span class="line">        &#x2F;&#x2F; &lt;public&#x2F;private&#x2F;protected&gt; &lt;返回值&gt; &lt;函数名称&gt;(&lt;参数&gt;)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 类可以为字段实现 getters 和 setters 方法 for their fields</span><br><span class="line">        &#x2F;&#x2F; 或者可以实现属性（C#推荐使用这个）</span><br><span class="line">        &#x2F;&#x2F; 方法的参数可以有默认值</span><br><span class="line">        &#x2F;&#x2F; 在有默认值的情况下，调用方法的时候可以省略相应的参数</span><br><span class="line">        public void SpeedUp(int increment &#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            _speed +&#x3D; increment;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void SlowDown(int decrement &#x3D; 1)</span><br><span class="line">        &#123;</span><br><span class="line">            _speed -&#x3D; decrement;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 属性可以访问和设置值</span><br><span class="line">        &#x2F;&#x2F; 当只需要访问数据的时候，考虑使用属性。</span><br><span class="line">        &#x2F;&#x2F; 属性可以定义get和set，或者是同时定义两者</span><br><span class="line">        private bool _hasTassles; &#x2F;&#x2F; private variable</span><br><span class="line">        public bool HasTassles &#x2F;&#x2F; public accessor</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return _hasTassles; &#125;</span><br><span class="line">            set &#123; _hasTassles &#x3D; value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 你可以在一行之内定义自动属性</span><br><span class="line">        &#x2F;&#x2F; 这个语法会自动创建后备字段</span><br><span class="line">        &#x2F;&#x2F; 你可以给getter或setter设置访问修饰符</span><br><span class="line">        &#x2F;&#x2F; 以便限制它们的访问</span><br><span class="line">        public bool IsBroken &#123; get; private set; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 属性的实现可以是自动的</span><br><span class="line">        public int FrameSize</span><br><span class="line">        &#123;</span><br><span class="line">            get;</span><br><span class="line">            &#x2F;&#x2F; 你可以给get或set指定访问修饰符</span><br><span class="line">            &#x2F;&#x2F; 以下代码意味着只有Bicycle类可以调用Framesize的set</span><br><span class="line">            private set;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;显示对象属性的方法</span><br><span class="line">        public virtual string Info()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;Gear: &quot; + Gear +</span><br><span class="line">                    &quot; Cadence: &quot; + Cadence +</span><br><span class="line">                    &quot; Speed: &quot; + _speed +</span><br><span class="line">                    &quot; Name: &quot; + Name +</span><br><span class="line">                    &quot; Cards in Spokes: &quot; + (_hasCardsInSpokes ? &quot;yes&quot; : &quot;no&quot;) +</span><br><span class="line">                    &quot;\n------------------------------\n&quot;</span><br><span class="line">                    ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 方法可以是静态的。通常用于辅助方法。</span><br><span class="line">        public static bool DidWeCreateEnoughBycles()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 在静态方法中，你只能引用类的静态成员</span><br><span class="line">            return BicyclesCreated &gt; 9000;</span><br><span class="line">        &#125; &#x2F;&#x2F; 如果你的类只需要静态成员，考虑将整个类作为静态类。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; &#x2F;&#x2F;  Bicycle类结束</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; PennyFarthing是Bicycle的一个子类</span><br><span class="line">    class PennyFarthing : Bicycle</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; (Penny Farthings是一种前轮很大的自行车。没有齿轮。）</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 调用父构造器</span><br><span class="line">        public PennyFarthing(int startCadence, int startSpeed) :</span><br><span class="line">            base(startCadence, startSpeed, 0, &quot;PennyFarthing&quot;, true, BikeBrand.Electra)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override int Gear</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">            set</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentException(&quot;你不可能在PennyFarthing上切换齿轮&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override string Info()</span><br><span class="line">        &#123;</span><br><span class="line">            string result &#x3D; &quot;PennyFarthing bicycle &quot;;</span><br><span class="line">            result +&#x3D; base.ToString(); &#x2F;&#x2F; 调用父方法</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 接口只包含成员的签名，而没有实现。</span><br><span class="line">    interface IJumpable</span><br><span class="line">    &#123;</span><br><span class="line">        void Jump(int meters); &#x2F;&#x2F; 所有接口成员是隐式地公开的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface IBreakable</span><br><span class="line">    &#123;</span><br><span class="line">        bool Broken &#123; get; &#125; &#x2F;&#x2F; 接口可以包含属性、方法和事件</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 类只能继承一个类，但是可以实现任意数量的接口</span><br><span class="line">    &#123;</span><br><span class="line">        int damage &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        public void Jump(int meters)</span><br><span class="line">        &#123;</span><br><span class="line">            damage +&#x3D; meters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public bool Broken</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                return damage &gt; 100;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 连接数据库，一个 LinqToSql的示例。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; EntityFramework Code First 很棒 (类似 Ruby的 ActiveRecord, 不过是双向的)</span><br><span class="line">    &#x2F;&#x2F;&#x2F; http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;data&#x2F;jj193542.aspx</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public class BikeRespository : DbSet</span><br><span class="line">    &#123;</span><br><span class="line">        public BikeRespository()</span><br><span class="line">            : base()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public DbSet&lt;Bicycle&gt; Bikes &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; &#x2F;&#x2F; 结束 Namespace</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-02</title>
    <link href="http://yoursite.com/2020/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-02/"/>
    <id>http://yoursite.com/2020/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-02/</id>
    <published>2020-03-18T11:23:10.747Z</published>
    <updated>2020-03-19T14:45:49.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法-02"><a href="#数据结构与算法-02" class="headerlink" title="数据结构与算法-02"></a>数据结构与算法-02</h1><h2 id="时间复杂度与大-O-表示法"><a href="#时间复杂度与大-O-表示法" class="headerlink" title="时间复杂度与大 O 表示法"></a>时间复杂度与大 O 表示法</h2><p>算法的速度并不能简单的以执行时间作为衡量标准</p><p>随着输入数据的两级不断增大，操作数的增数是不同的</p><h3 id="大-O-表示法"><a href="#大-O-表示法" class="headerlink" title="大 O 表示法"></a>大 O 表示法</h3><p>我们常用大 O 表示法表示<a href="https://baike.baidu.com/item/时间复杂度/1894057" target="_blank" rel="noopener">时间复杂度</a>，注意它是某一个算法的时间复杂度。大 O 表示只是说有上界，由定义如果 f(n)=O(n)，那显然成立 f(n)=O(n^2），它给你一个上界，但并不是上确界，但人们在表示的时候一般都习惯表示前者。此外，一个问题本身也有它的<a href="https://baike.baidu.com/item/复杂度" target="_blank" rel="noopener">复杂度</a>，如果某个算法的复杂度到达了这个问题复杂度的下界，那就称这样的算法是最佳算法。</p><h3 id="算法的执行时间"><a href="#算法的执行时间" class="headerlink" title="算法的执行时间"></a>算法的执行时间</h3><p>算法的执行时间等于它所有基本操作执行时间之和， 而一条基本操作的执行时间等于它执行的次数和每一次执行的时间的积，</p><p>如下：</p><p>算法的执行时间 = 操作 1 + 操作 2 + … + 操作 n</p><p>操作的执行时间 = 操作执行次数 X 执行一次的时间</p><p>然而存在一个问题，不同的编程语言，不同的编译器，或不同的 CPU 等因素将导致执行一次操作的时间各不相同，这样的结果会使算法的比较产生歧义， 于是我们假定所有计算机执行相同的一次基本操作所需时间相同，而把算法中基本操作所执行的最大次数作为量度。就是说我们把算法的执行时间简单地用基本操作的执行次数来代替了。</p><h4 id="首先看一个简单的示例："><a href="#首先看一个简单的示例：" class="headerlink" title="首先看一个简单的示例："></a><strong>首先看一个简单的示例：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int num1,num2;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">num1+&#x3D;1;</span><br><span class="line">for(int j&#x3D;1;j&lt;n;j*&#x3D;2)&#123;</span><br><span class="line">num2+&#x3D;num1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>1.语句 int num1,num2；的频度(==执行次数==)为 1；</p><p>语句 i=0；的频度为 1；</p><p>语句 i&lt;n; i++; num1+=1; j=1; 的频度为 n；</p><p>语句 j&lt;=n;j*=2;num2+=num1;频度为 n * log2 n;</p><p>所有一共执行了 2+4n+3n*log2 n</p><p>忽略掉 T(n）中的常量、低次幂和最高次幂的系数</p><p>f(n) = n*log2n</p><p>当 n 趋向于<a href="https://baike.baidu.com/item/无穷大" target="_blank" rel="noopener">无穷大</a>，1/n 趋向于 0，1/log2n 趋向于 0</p><p>所以<a href="https://baike.baidu.com/item/极限" target="_blank" rel="noopener">极限</a>等于 3。</p><p>T(n) = O(n*log2 n)</p><p><strong>简化的计算步骤</strong></p><p>再来分析一下，可以看出，决定<a href="https://baike.baidu.com/item/算法复杂度/210801" target="_blank" rel="noopener">算法复杂度</a>的是执行次数最多的语句，这里是 num2 += num1，一般也是最内循环的语句。</p><p>并且，通常将求解极限是否为常量也省略掉？</p><p>于是，<strong>以上步骤可以简化为：</strong></p><p>⒈ 找到执行次数最多的语句</p><p>⒉ 计算语句执行次数的<a href="https://baike.baidu.com/item/数量级" target="_blank" rel="noopener">数量级</a></p><p>⒊ 用大 O 来表示结果</p><p>继续以上述算法为例，进行分析：</p><p>⒈</p><p>执行次数最多的语句为 num2 += num1</p><p>⒉</p><p>T(n) = n*log2n</p><p>f(n) = n*log2n</p><p>⒊</p><p>// lim(T(n)/f(n)) = 1</p><p>T(n) = O(n*log2n)</p><p><strong>一些补充说明</strong></p><p>最坏时间复杂度</p><p>算法的时间复杂度不仅与语句频度有关，还与问题规模及输入实例中各元素的取值有关。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。这就保证了算法的运行时间不会比任何更长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构与算法-02&quot;&gt;&lt;a href=&quot;#数据结构与算法-02&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法-02&quot;&gt;&lt;/a&gt;数据结构与算法-02&lt;/h1&gt;&lt;h2 id=&quot;时间复杂度与大-O-表示法&quot;&gt;&lt;a href=&quot;#时间复杂度与大-
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-01</title>
    <link href="http://yoursite.com/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/"/>
    <id>http://yoursite.com/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/</id>
    <published>2020-03-17T11:01:28.675Z</published>
    <updated>2020-03-17T15:27:49.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法-01"><a href="#数据结构与算法-01" class="headerlink" title="数据结构与算法-01"></a>数据结构与算法-01</h1><h3 id="什么是动态数组"><a href="#什么是动态数组" class="headerlink" title="什么是动态数组"></a>什么是动态数组</h3><p>C#中的数组</p><p>静态数组： int[] float[] double[] char[] string[]</p><p>特点：数组一旦被创建，其容量大小是无法改变的</p><p>int[] arr = new int[20]</p><p>动态数组：ArrayList List(泛型)</p><p>特点：可以根据元素的多少动态的调整数组容量的大小</p><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] arr &#x3D; new int[10];</span><br><span class="line">           for(int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               arr[i] &#x3D; i;</span><br><span class="line">               Console.Write(arr[i] + &quot;&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>数组存储满后无法继续添加元素</p><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList a &#x3D; new ArrayList(10);</span><br><span class="line">            for(int i &#x3D; 0; i &lt; 15; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a.Add(i);</span><br><span class="line">                Console.Write(a[i] + &quot; &quot;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>可以继续通过 <strong>数组名.Add()</strong> 继续添加元素</p><h3 id="List（泛型）"><a href="#List（泛型）" class="headerlink" title="List（泛型）"></a>List（泛型）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int&gt; b &#x3D; new List&lt;int&gt;(10);</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 15; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                b.Add(i);</span><br><span class="line">                Console.Write(b[i]+&quot; &quot;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>与 ArrayList 相同</p><p>==使用动态数组需要先引入命名空间==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br></pre></td></tr></table></figure><h2 id="如何编写一个动态数组"><a href="#如何编写一个动态数组" class="headerlink" title="如何编写一个动态数组"></a>如何编写一个动态数组</h2><blockquote><p>先编写一个大体</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 数据结构</span><br><span class="line">&#123;</span><br><span class="line">    class Array1</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建数组储存元素</span><br><span class="line">        private int[] data;</span><br><span class="line">        &#x2F;&#x2F;记录数组元素数量</span><br><span class="line">        private int N;</span><br><span class="line">        &#x2F;&#x2F;用户输入数组大小</span><br><span class="line">        public Array1(int capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            data &#x3D; new int[capacity];</span><br><span class="line">            N &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用户不输入默认创建数组大小</span><br><span class="line">        &#x2F;&#x2F;两个方法作用相同</span><br><span class="line">        public Array1() : this(10) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public Array1()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    data &#x3D; new int[10];</span><br><span class="line">        &#x2F;&#x2F;    N &#x3D; 10;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;访问数组的容量</span><br><span class="line">        public int Capacity</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return data.Length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;访问数组中元素的多少</span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询数组是否为空</span><br><span class="line">        public bool IsEmpty</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N &#x3D;&#x3D; 0; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="往数组添加元素"><a href="#往数组添加元素" class="headerlink" title="往数组添加元素"></a>往数组添加元素</h4><blockquote><p>添加操作 <strong><u><em>N=数组中的元素数量</em></u></strong></p></blockquote><p>==1.往数组末尾添加元素==</p><p>直接向 N 的位置添加元素</p><p>添加之后 N++</p><p>==2.往指定位置添加元素==</p><p>将指定位置后面的元素从最后一位开始向后移动一位</p><p>一直移动到指定位置中的原本的元素也后移一位时</p><p>再将新元素添加到指定位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void Add(int index,int e)</span><br><span class="line">       &#123;</span><br><span class="line">           if (index &lt; 0 || index &gt; N)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组容量已满！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           for(int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">           &#123;</span><br><span class="line">               data[i + 1] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           data[index] &#x3D; e;</span><br><span class="line">           N++;</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;末尾添加元素 直接调用上面Add方法</span><br><span class="line">       public void AddLast(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           Add(N, e);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;头部添加元素 也直接调用Add</span><br><span class="line">       public void AddFirst(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           Add(0, e);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="打印、获取、修改"><a href="#打印、获取、修改" class="headerlink" title="打印、获取、修改"></a>打印、获取、修改</h4><blockquote><p>打印数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印数组</span><br><span class="line">&#x2F;&#x2F;重写一个ToString方法</span><br><span class="line">public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">    &#x2F;&#x2F;字符串构造</span><br><span class="line">            StringBuilder res &#x3D; new StringBuilder();</span><br><span class="line">    &#x2F;&#x2F;数组信息</span><br><span class="line">            res.Append(string.Format(&quot;Array1: count&#x3D;&#123;0&#125; capacity&#x3D;&#123;1&#125;\n&quot;, N, data.Length));</span><br><span class="line">    &#x2F;&#x2F;拼接数组元素</span><br><span class="line">            res.Append(&quot;[&quot;);</span><br><span class="line">    &#x2F;&#x2F;遍历数组元素</span><br><span class="line">            for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.Append(data[i]);</span><br><span class="line">                if (i !&#x3D; N - 1)</span><br><span class="line">                    res.Append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            res.Append(&quot;]&quot;);</span><br><span class="line">    &#x2F;&#x2F;返回结果</span><br><span class="line">            return res.ToString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取数组元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取数组元素</span><br><span class="line">        public int Get(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            return data[index];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取头部元素</span><br><span class="line">        public int Getfirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取尾部的元素</span><br><span class="line">        public int GetLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(N - 1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改元素</span><br><span class="line">        public void Set(int index, int newE)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            data[index]&#x3D;newE;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="包含、查询、删除"><a href="#包含、查询、删除" class="headerlink" title="包含、查询、删除"></a>包含、查询、删除</h4><blockquote><p>查询是否包含元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询是否包含某元素</span><br><span class="line">        public bool Contains(int e)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (data[i] &#x3D;&#x3D; e)</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询元素位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询元素所在的位置</span><br><span class="line">       public int IndexOf(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               if (data[i] &#x3D;&#x3D; e)</span><br><span class="line">                   return i;</span><br><span class="line">           &#125;</span><br><span class="line">           return -1;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除元素</p></blockquote><p>==删除元素后会空出一个位置，所以需要将删除位置后面的元素向前移动一位==</p><p>==N 也要减一==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除元素</span><br><span class="line">        public int RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            int del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for(int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除头部元素</span><br><span class="line">        public int RemoveFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除尾部元素</span><br><span class="line">        public int RemoveLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(N-1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h4><p>==新建一个更大打的数组，将原来的元素复制到新的数组==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;数组扩容</span><br><span class="line">      private void ResetCapacity(int newCapacityt)</span><br><span class="line">       &#123;</span><br><span class="line">           &#x2F;&#x2F;新建数组</span><br><span class="line">           int[] newdata &#x3D; new int[newCapacityt];</span><br><span class="line">           &#x2F;&#x2F;复制原来的元素</span><br><span class="line">           for(int i&#x3D;0; i &lt; N; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               newdata[i] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;替换</span><br><span class="line">           data &#x3D; newdata;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>==此时我们就可以将之前的抛出异常改为扩容==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;向数组添加元素</span><br><span class="line">       public void Add(int index,int e)</span><br><span class="line">       &#123;</span><br><span class="line">           if (index &lt; 0 || index &gt; N)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">             &#x2F;&#x2F;throw new ArgumentException(&quot;数组容量已满！&quot;);</span><br><span class="line">               ResetCapacity(data.Length * 2);</span><br><span class="line">           for(int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">           &#123;</span><br><span class="line">               data[i + 1] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           data[index] &#x3D; e;</span><br><span class="line">           N++;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="数组缩容"><a href="#数组缩容" class="headerlink" title="数组缩容"></a>数组缩容</h4><p>==如果数组空间过大而元素过少就会造成内存的浪费，此时我们进行缩容操作==</p><h5 id="在删除方法中添加一个是否需要缩容的判断"><a href="#在删除方法中添加一个是否需要缩容的判断" class="headerlink" title="在删除方法中添加一个是否需要缩容的判断"></a>在删除方法中添加一个是否需要缩容的判断</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用索引删除元素</span><br><span class="line">        public int RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            int del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for(int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;判断是否需要缩容</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length &#x2F; 4)</span><br><span class="line">                ResetCapacity(data.Length &#x2F; 2);</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>只能储存整型的元素，其他类型都不能存储</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>隐式的转化为 object 类型进行元素的存储</p><p>使用时再强制转化为对应的类型</p><p>==ArrayList 就是采用这种方法==</p><p>类型的转化会频繁进行装箱和拆箱[^1]的操作，在性能上大打折扣</p><p>所以我们采用 List(泛型)这种方法</p><h6 id="1-装箱和拆箱"><a href="#1-装箱和拆箱" class="headerlink" title="[^1]装箱和拆箱"></a>[^1]装箱和拆箱</h6><p><code>装箱：值类型转换为引用类型</code></p><p><code>拆箱：引用类型转化为值类型</code></p><p><code>引用类型：任何称为“类”的类型都是引用类型，使用class修饰</code></p><p><code>如：string object</code></p><p><code>值类型：所有值类型都称为结构或枚举，使用struct或enum修饰</code></p><p><code>如：int float double char</code></p><h4 id="ArrayList-与-List-性能测试"><a href="#ArrayList-与-List-性能测试" class="headerlink" title="ArrayList 与 List 性能测试"></a>ArrayList 与 List 性能测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; 10000000;</span><br><span class="line">         &#x2F;&#x2F;需要引入命名空间</span><br><span class="line">         Stopwatch t1 &#x3D; new Stopwatch();</span><br><span class="line">         Stopwatch t2 &#x3D; new Stopwatch();</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(&quot;测试值类型对象int&quot;);</span><br><span class="line">         t1.Start();</span><br><span class="line">         List&lt;int&gt; l &#x3D; new List&lt;int&gt;();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             l.Add(i);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             int x &#x3D; l[i];&#x2F;&#x2F;不发生拆箱</span><br><span class="line">         &#125;</span><br><span class="line">         t1.Stop();</span><br><span class="line">         Console.WriteLine(&quot;List time: &quot; + t1.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line">         t2.Start();</span><br><span class="line">         ArrayList d &#x3D; new ArrayList();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             d.Add(i);&#x2F;&#x2F;发生装箱 “值类型转化为object引用类型”</span><br><span class="line">             int x &#x3D; (int)d[i];&#x2F;&#x2F;发生拆箱操作 “引用类型转化为值类型”</span><br><span class="line">         &#125;</span><br><span class="line">         t2.Stop();</span><br><span class="line">         Console.WriteLine(&quot;ArrayList time: &quot; + t2.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line">         Console.Read();</span><br></pre></td></tr></table></figure><p>启动时将 Debug 改为优化版的 Release 进行性能测试</p><p>==<strong>测试结果</strong>==</p><p>==List time: 64ms<br>ArrayList time: 913ms==</p><p>可见值类型的存储性能相差巨大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; 10000000;</span><br><span class="line">         &#x2F;&#x2F;需要引入命名空间</span><br><span class="line">         Stopwatch t1 &#x3D; new Stopwatch();</span><br><span class="line">         Stopwatch t2 &#x3D; new Stopwatch();</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(&quot;测试值类型对象string&quot;);</span><br><span class="line">         t1.Start();</span><br><span class="line">         List&lt;string&gt; l &#x3D; new List&lt;string&gt;();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             l.Add(&quot;X&quot;);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             string x &#x3D; l[i];&#x2F;&#x2F;不发生拆箱</span><br><span class="line">         &#125;</span><br><span class="line">         t1.Stop();</span><br><span class="line">         Console.WriteLine(&quot;List time: &quot; + t1.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line">         t2.Start();</span><br><span class="line">         ArrayList d &#x3D; new ArrayList();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             d.Add(&quot;x&quot;);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             string x &#x3D; (string)d[i];&#x2F;&#x2F;不发生拆箱操作</span><br><span class="line">         &#125;</span><br><span class="line">         t2.Stop();</span><br><span class="line">         Console.WriteLine(&quot;ArrayList time: &quot; + t2.ElapsedMilliseconds + &quot;ms&quot;);</span><br></pre></td></tr></table></figure><p>引用类型的性能相差不大</p><p>==<strong>测试结果</strong>==</p><p>==List time: 158ms<br>ArrayList time: 235ms==</p><h4 id="泛型和非泛型"><a href="#泛型和非泛型" class="headerlink" title="泛型和非泛型"></a>泛型和非泛型</h4><p><strong>泛型数组优势</strong></p><p>第一是对于存储值类型数据，性能更优</p><p>第二是使代码更清晰和保证类型安全</p><p>==List<int> l = new List<int>();==</p><p>必须指定一个指定类型</p><p>==ArrayList a = new ArrayList();==</p><p>什么类型都能存储，取出时需要明确转换类型，不然就会报错</p><h4 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h4><p>将创建、添加、返回的类型改为“E”==:占位符==即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 数据结构</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;将数组改为泛型</span><br><span class="line">    class Array2&lt;E&gt;&#x2F;&#x2F;E仅为占位符代表用户定义的值类型 可以改成任意</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建数组储存元素</span><br><span class="line">        private E[] data;</span><br><span class="line">        &#x2F;&#x2F;记录数组元素数量</span><br><span class="line">        private int N;</span><br><span class="line">        &#x2F;&#x2F;用户输入数组大小</span><br><span class="line">        public Array2(int capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            data &#x3D; new E[capacity];</span><br><span class="line">            N &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用户不输入默认创建数组大小</span><br><span class="line">        &#x2F;&#x2F;两个方法作用相同</span><br><span class="line">        public Array2() : this(10) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public Array1()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    data &#x3D; new int[10];</span><br><span class="line">        &#x2F;&#x2F;    N &#x3D; 10;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;访问数组的容量</span><br><span class="line">        public int Capacity</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return data.Length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;访问数组中元素的多少</span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询数组是否为空</span><br><span class="line">        public bool IsEmpty</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N &#x3D;&#x3D; 0; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;向数组添加元素</span><br><span class="line">        public void Add(int index, E e)</span><br><span class="line">        &#123;</span><br><span class="line">            if (index &lt; 0 || index &gt; N)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">                ResetCapacity(data.Length * 2);</span><br><span class="line">            for (int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i + 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            data[index] &#x3D; e;</span><br><span class="line">            N++;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;末尾添加元素 直接调用上面Add方法</span><br><span class="line">        public void AddLast(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            Add(N, e);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;头部添加元素 也直接调用Add</span><br><span class="line">        public void AddFirst(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            Add(0, e);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;打印数组</span><br><span class="line">        &#x2F;&#x2F;重写一个ToString方法</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;字符串构造</span><br><span class="line">            StringBuilder res &#x3D; new StringBuilder();</span><br><span class="line">            &#x2F;&#x2F;数组信息</span><br><span class="line">            res.Append(string.Format(&quot;Array1: count&#x3D;&#123;0&#125; capacity&#x3D;&#123;1&#125;\n&quot;, N, data.Length));</span><br><span class="line">            &#x2F;&#x2F;拼接数组元素</span><br><span class="line">            res.Append(&quot;[&quot;);</span><br><span class="line">            &#x2F;&#x2F;遍历数组元素</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.Append(data[i]);</span><br><span class="line">                if (i !&#x3D; N - 1)</span><br><span class="line">                    res.Append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            res.Append(&quot;]&quot;);</span><br><span class="line">            &#x2F;&#x2F;返回结果</span><br><span class="line">            return res.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取数组元素</span><br><span class="line">        public E Get(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            return data[index];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取头部元素</span><br><span class="line">        public E Getfirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取尾部的元素</span><br><span class="line">        public E GetLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(N - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;修改元素</span><br><span class="line">        public void Set(int index, E newE)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            data[index] &#x3D; newE;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询是否包含某元素</span><br><span class="line">        public bool Contains(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;使用Equals进行元素比较 替换掉原来的&#x3D;&#x3D;</span><br><span class="line">                if (data[i].Equals(e))</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询元素所在的位置</span><br><span class="line">        public int IndexOf(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (data[i].Equals(e))</span><br><span class="line">                    return i;</span><br><span class="line">            &#125;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用索引删除元素</span><br><span class="line">        public E RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            E del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for (int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;判断是否需要缩容</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length &#x2F; 4)</span><br><span class="line">                ResetCapacity(data.Length &#x2F; 2);</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除头部元素</span><br><span class="line">        public E RemoveFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除尾部元素</span><br><span class="line">        public E RemoveLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(N - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除特定元素</span><br><span class="line">        public void Remove(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;查找元素</span><br><span class="line">            int index &#x3D; IndexOf(e);</span><br><span class="line">            &#x2F;&#x2F;检查</span><br><span class="line">            if (index !&#x3D; -1)</span><br><span class="line">                &#x2F;&#x2F;删除元素</span><br><span class="line">                RemoveAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;数组扩容</span><br><span class="line">        private void ResetCapacity(int newCapacityt)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;新建数组</span><br><span class="line">            E[] newdata &#x3D; new E[newCapacityt];</span><br><span class="line">            &#x2F;&#x2F;复制原来的元素</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                newdata[i] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;替换</span><br><span class="line">            data &#x3D; newdata;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构与算法-01&quot;&gt;&lt;a href=&quot;#数据结构与算法-01&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法-01&quot;&gt;&lt;/a&gt;数据结构与算法-01&lt;/h1&gt;&lt;h3 id=&quot;什么是动态数组&quot;&gt;&lt;a href=&quot;#什么是动态数组&quot; class
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客使用</title>
    <link href="http://yoursite.com/2020/03/16/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/16/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-16T05:55:42.219Z</published>
    <updated>2020-03-16T06:02:29.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="●-在博客上发表文章"><a href="#●-在博客上发表文章" class="headerlink" title="● 在博客上发表文章"></a>● 在博客上发表文章</h1><p>​            ① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题            根据需要命名</p><ul><li><pre><code>hexo n &quot;文章标题&quot;</code></pre><p>​    也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><p>​    ② 用编辑器编写文章</p><h5 id="md-全称-Markdown，-Markdown-是-2004-年由-John-Gruberis-设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，-md-文件可以使用支持-Markdown-语法的编辑器编辑，然后保存文件到-Hexo-source-posts-文件夹下即可"><a href="#md-全称-Markdown，-Markdown-是-2004-年由-John-Gruberis-设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，-md-文件可以使用支持-Markdown-语法的编辑器编辑，然后保存文件到-Hexo-source-posts-文件夹下即可" class="headerlink" title="md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可"></a>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</h5></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;●-在博客上发表文章&quot;&gt;&lt;a href=&quot;#●-在博客上发表文章&quot; class=&quot;headerlink&quot; title=&quot;● 在博客上发表文章&quot;&gt;&lt;/a&gt;● 在博客上发表文章&lt;/h1&gt;&lt;p&gt;​            ① 新建一个空文章，输入以下命令，会在项目 \He
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typora编辑器</title>
    <link href="http://yoursite.com/2020/03/16/Typora%E7%BC%96%E7%A0%81%E5%99%A8/"/>
    <id>http://yoursite.com/2020/03/16/Typora%E7%BC%96%E7%A0%81%E5%99%A8/</id>
    <published>2020-03-16T05:38:53.000Z</published>
    <updated>2020-03-17T15:28:10.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-编辑器-————-书写即为美学"><a href="#Typora-编辑器-————-书写即为美学" class="headerlink" title="Typora 编辑器 ———— 书写即为美学"></a>Typora 编辑器 ———— 书写即为美学</h1><p>我也是初学者，仅仅是个人经验总结，不保证质量。</p><p>鉴于 hexo 渲染和 Typora 渲染差距很大，建议复制<a href="https://paste.ubuntu.com/26540980/" target="_blank" rel="noopener">此处</a>源码，在本机上测试效果。</p><p>官方网站：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p><p>支持平台：</p><ul><li>Windows</li><li>Linux</li><li>OSX</li></ul><p>特点：</p><ul><li>完美支持 Github 的 Markdown 语法；</li><li>人性化的书写方式：<ul><li>表格的书写、挪动；</li><li>图片，超链接，网页表格复制；</li><li>目录生成；</li></ul></li><li>支持 LeTex 公式书写；</li><li>支持 Flowchart，Mermaid 等流程图绘制；</li><li>emoji，高亮，备注，上标，下标等书写；</li><li>生成网页，pdf，图片，甚至 word，LeTex 等格式。</li></ul><h2 id="基本的带快捷键的-Markdown-书写演示"><a href="#基本的带快捷键的-Markdown-书写演示" class="headerlink" title="基本的带快捷键的 Markdown 书写演示"></a>基本的带快捷键的 Markdown 书写演示</h2><p><code>Ctrl 0</code> 到 <code>Ctrl 4</code>：普通文本、一级～四级标题；</p><p><code>Ctrl B</code>：加粗，<strong>加粗测试</strong>；</p><p><code>Ctrl I</code>：斜体，<em>斜体测试</em>；</p><p><code>Ctrl U</code>：下划线，下划线测试；</p><p><code>Shift Alt 5</code>：删除线，<del>删除线测试</del>；</p><p><code>Shift Ctrl Tab键上面那个键</code>：行内代码块，<code>行内代码块测试</code>；</p><p><code>Ctrl K</code>：超链接，<a href="https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/www.baidu.com" target="_blank" rel="noopener">超链接测试</a>；还支持文章内锚点，请 <code>Ctrl</code> 点击此处 :arrow_right: [第二节](<a href="https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/#基本的不带快捷键" target="_blank" rel="noopener">https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/#基本的不带快捷键</a> Markdown 书写演示)；</p><p><code>Ctrl T</code>：表格，支持拖拽移动、网页端表格复制转换：</p><table><thead><tr><th align="center">标题</th><th align="center">数据一</th><th align="center">数据二</th></tr></thead><tbody><tr><td align="center">表格测试</td><td align="center">943</td><td align="center">baka</td></tr></tbody></table><p><code>Ctrl Shift Q</code>：引用：</p><blockquote><p>我需要三件东西：爱情、友谊和图书。然而这三者之间何其相通！</p><p>炽热的爱情可以充实图书的内容，图书又是人们最忠实的朋友。</p><p>—— 蒙田</p></blockquote><p><code>Shift Ctrl I</code>：图片：</p><p><a href="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" target="_blank" rel="noopener"><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="风景"></a></p><p><code>Shift Ctrl M</code>：公示块，快捷输入 LeTex 公式：<br>$$<br>Euler’s identity: e^{i\pi}+1=0<br>$$</p><h2 id="基本的不带快捷键-Markdown-书写演示"><a href="#基本的不带快捷键-Markdown-书写演示" class="headerlink" title="基本的不带快捷键 Markdown 书写演示"></a>基本的不带快捷键 Markdown 书写演示</h2><p><strong>部分功能需要现在配置文件中开启才能使用</strong></p><p>代码块（我居然不能转义那个字符，就 Tab 键上面那个）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">import os</span><br><span class="line">with open(&#39;List.txt&#39;, &#39;w&#39;) as f:</span><br><span class="line">for i in range(10):</span><br><span class="line">f.writelines(str(i))  </span><br><span class="line">print(&#39;成功写入数列&#39;)</span><br><span class="line">os.system(&#39;rm .&#x2F;List.txt&#39;)</span><br><span class="line">print(&#39;成功删除文件&#39;)</span><br></pre></td></tr></table></figure><p>无序、有序、任务列表：</p><ul><li>酒石酸菌</li><li>玄墨之蝶</li></ul><ol><li>HTML</li><li>Python 3</li></ol><ul><li>1.12.2 教程计划</li><li>Weblate 翻译计划</li><li>All The Mods 3 实况计划</li></ul><p>参考链接：</p><p> 通过培养试验研究了有机酸对铅、镉的毒害影响，结果表明柠檬酸对铅[^1]，酒石酸对镉有较明显解毒作用[^2]。用逐步提取法研究萝卜根叶内重金属存在的化学形态 ，有机酸处理并不影响各形态铅的优势顺序 ，但各形态铅的浓度或相对百分率发生了变化。</p><p>[^1]: 陈苏. 污染土壤中镉、铅的活化及植物有效性研究[D]. 中国科学院沈阳应用生态研究所, 2007.<br>[^2]: 陈英旭, 林琦, 陆芳,等. 有机酸对铅、镉植株危害的解毒作用研究[J]. 环境科学学报, 2000, 20(4):467-472.</p><p>上标下标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上标：X^2^</span><br><span class="line">下标：H~2~O</span><br></pre></td></tr></table></figure><p>X^2^, H<del>2</del>O</p><p>高亮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本节课重点：&#x3D;&#x3D;第六、七章不考&#x3D;&#x3D;，第三章出题较多，&#x3D;&#x3D;平时分占 30%&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>本节课重点：==第六、七章不考==，第三章出题较多，==平时分占 30%==</p><p>注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这一段不要显示出来--&gt;</span><br></pre></td></tr></table></figure><p>内联公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$e^&#123;i\pi&#125;+1&#x3D;0$</span><br></pre></td></tr></table></figure><p>$e^{i\pi}+1=0$</p><p>分割线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>我绝不会弃坑的！</p><hr><p>:arrow_up: 上面的都是假话</p><p>emoji 图标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:arrow_heading_down: :arrow_heading_up:</span><br><span class="line">:ab: :blue_heart: :jack_o_lantern:</span><br><span class="line">:ballot_box_with_check: :fork_and_knife:</span><br></pre></td></tr></table></figure><p>:arrow_heading_down: :arrow_heading_up:<br>:ab: :blue_heart: :jack_o_lantern:<br>:ballot_box_with_check: :fork_and_knife:</p><p>目录生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure><p>[TOC]</p><h1 id="Markdown-拓展功能"><a href="#Markdown-拓展功能" class="headerlink" title="Markdown 拓展功能"></a>Markdown 拓展功能</h1><p>HTML 原生支持，目前只支持 img 标签，用以自定义图片大小和缩放：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;static.pexels.com&#x2F;photos&#x2F;461797&#x2F;pexels-photo-461797.jpeg width&#x3D;&quot;550px&quot; alt&#x3D;&quot;test&quot;&gt;&lt;&#x2F;img&gt;</span><br></pre></td></tr></table></figure><p><a href="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" target="_blank" rel="noopener"><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="test"></a></p><p>LaTex 公式支持，包括 mhchem，AMSmath，BBox：</p><p>mhchem：<br>$$<br>\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}<br>$$<br>BBox：<br>$$<br>\bbox[5px,border:2px solid red]{AB^2 +AC^2 = BC^2}<br>$$</p><p>流程图支持，内置了 Flowchart，Sequence，Mermaid 引擎，支持多种多样的流程图、时序图、甘特图：</p><ul><li>流程图（Flowchart）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><ul><li>流程图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    开始--&gt;条件B;</span><br><span class="line">    条件A--&gt;条件C;</span><br><span class="line">    条件B--&gt;条件D;</span><br><span class="line">    条件C--&gt;条件D;</span><br><span class="line">    条件A--&gt;条件D;</span><br><span class="line">    开始--&gt;条件C;</span><br><span class="line">    开始--&gt;条件A;</span><br><span class="line">    条件D--&gt;结束;</span><br></pre></td></tr></table></figure><ul><li>时序图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail...</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><ul><li>时序图（Sequence）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">Note right of John: Rational thoughts</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">John-&gt;&gt;Bob: How about you?</span><br><span class="line">Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><ul><li>甘特图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section A section</span><br><span class="line">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        Future task               :         des3, after des2, 5d</span><br><span class="line">        Future task2               :         des4, after des3, 5d</span><br><span class="line">        section Critical tasks</span><br><span class="line">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">        Create tests for parser             :crit, active, 3d</span><br><span class="line">        Future task in critical line        :crit, 5d</span><br><span class="line">        Create tests for renderer           :2d</span><br><span class="line">        Add to mermaid                      :1d</span><br></pre></td></tr></table></figure><hr><ul><li>其他 Mermaid 图（目前还有点问题，不建议使用）</li><li>Class diagram</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 &lt;--&gt; C2: Cool label</span><br></pre></td></tr></table></figure><ul><li>Git</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line">    &quot;nodeSpacing&quot;: 100,</span><br><span class="line">    &quot;nodeRadius&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br></pre></td></tr></table></figure><h2 id="主题替换"><a href="#主题替换" class="headerlink" title="主题替换"></a>主题替换</h2><p>访问：<a href="http://theme.typora.io/" target="_blank" rel="noopener">http://theme.typora.io/</a></p><h2 id="文章导出"><a href="#文章导出" class="headerlink" title="文章导出"></a>文章导出</h2><ul><li>图片（非常适合手机阅读）</li><li>PDF</li><li>HTML（可选择是否带样式表）</li><li>其他需要第三方库支持</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Typora-编辑器-————-书写即为美学&quot;&gt;&lt;a href=&quot;#Typora-编辑器-————-书写即为美学&quot; class=&quot;headerlink&quot; title=&quot;Typora 编辑器 ———— 书写即为美学&quot;&gt;&lt;/a&gt;Typora 编辑器 ———— 书写即为
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/15/hello-world/"/>
    <id>http://yoursite.com/2020/03/15/hello-world/</id>
    <published>2020-03-15T09:56:01.313Z</published>
    <updated>2020-03-16T05:46:32.067Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hello word" scheme="http://yoursite.com/tags/hello-word/"/>
    
  </entry>
  
</feed>
