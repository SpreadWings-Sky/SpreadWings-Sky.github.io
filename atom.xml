<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>俺たちに翼はない</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-19T14:45:49.848Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>云之彼端</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构与算法-02</title>
    <link href="http://yoursite.com/2020/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-02/"/>
    <id>http://yoursite.com/2020/03/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-02/</id>
    <published>2020-03-18T11:23:10.747Z</published>
    <updated>2020-03-19T14:45:49.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法-02"><a href="#数据结构与算法-02" class="headerlink" title="数据结构与算法-02"></a>数据结构与算法-02</h1><h2 id="时间复杂度与大-O-表示法"><a href="#时间复杂度与大-O-表示法" class="headerlink" title="时间复杂度与大 O 表示法"></a>时间复杂度与大 O 表示法</h2><p>算法的速度并不能简单的以执行时间作为衡量标准</p><p>随着输入数据的两级不断增大，操作数的增数是不同的</p><h3 id="大-O-表示法"><a href="#大-O-表示法" class="headerlink" title="大 O 表示法"></a>大 O 表示法</h3><p>我们常用大 O 表示法表示<a href="https://baike.baidu.com/item/时间复杂度/1894057" target="_blank" rel="noopener">时间复杂度</a>，注意它是某一个算法的时间复杂度。大 O 表示只是说有上界，由定义如果 f(n)=O(n)，那显然成立 f(n)=O(n^2），它给你一个上界，但并不是上确界，但人们在表示的时候一般都习惯表示前者。此外，一个问题本身也有它的<a href="https://baike.baidu.com/item/复杂度" target="_blank" rel="noopener">复杂度</a>，如果某个算法的复杂度到达了这个问题复杂度的下界，那就称这样的算法是最佳算法。</p><h3 id="算法的执行时间"><a href="#算法的执行时间" class="headerlink" title="算法的执行时间"></a>算法的执行时间</h3><p>算法的执行时间等于它所有基本操作执行时间之和， 而一条基本操作的执行时间等于它执行的次数和每一次执行的时间的积，</p><p>如下：</p><p>算法的执行时间 = 操作 1 + 操作 2 + … + 操作 n</p><p>操作的执行时间 = 操作执行次数 X 执行一次的时间</p><p>然而存在一个问题，不同的编程语言，不同的编译器，或不同的 CPU 等因素将导致执行一次操作的时间各不相同，这样的结果会使算法的比较产生歧义， 于是我们假定所有计算机执行相同的一次基本操作所需时间相同，而把算法中基本操作所执行的最大次数作为量度。就是说我们把算法的执行时间简单地用基本操作的执行次数来代替了。</p><h4 id="首先看一个简单的示例："><a href="#首先看一个简单的示例：" class="headerlink" title="首先看一个简单的示例："></a><strong>首先看一个简单的示例：</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int num1,num2;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">num1+&#x3D;1;</span><br><span class="line">for(int j&#x3D;1;j&lt;n;j*&#x3D;2)&#123;</span><br><span class="line">num2+&#x3D;num1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>1.语句 int num1,num2；的频度(==执行次数==)为 1；</p><p>语句 i=0；的频度为 1；</p><p>语句 i&lt;n; i++; num1+=1; j=1; 的频度为 n；</p><p>语句 j&lt;=n;j*=2;num2+=num1;频度为 n * log2 n;</p><p>所有一共执行了 2+4n+3n*log2 n</p><p>忽略掉 T(n）中的常量、低次幂和最高次幂的系数</p><p>f(n) = n*log2n</p><p>当 n 趋向于<a href="https://baike.baidu.com/item/无穷大" target="_blank" rel="noopener">无穷大</a>，1/n 趋向于 0，1/log2n 趋向于 0</p><p>所以<a href="https://baike.baidu.com/item/极限" target="_blank" rel="noopener">极限</a>等于 3。</p><p>T(n) = O(n*log2 n)</p><p><strong>简化的计算步骤</strong></p><p>再来分析一下，可以看出，决定<a href="https://baike.baidu.com/item/算法复杂度/210801" target="_blank" rel="noopener">算法复杂度</a>的是执行次数最多的语句，这里是 num2 += num1，一般也是最内循环的语句。</p><p>并且，通常将求解极限是否为常量也省略掉？</p><p>于是，<strong>以上步骤可以简化为：</strong></p><p>⒈ 找到执行次数最多的语句</p><p>⒉ 计算语句执行次数的<a href="https://baike.baidu.com/item/数量级" target="_blank" rel="noopener">数量级</a></p><p>⒊ 用大 O 来表示结果</p><p>继续以上述算法为例，进行分析：</p><p>⒈</p><p>执行次数最多的语句为 num2 += num1</p><p>⒉</p><p>T(n) = n*log2n</p><p>f(n) = n*log2n</p><p>⒊</p><p>// lim(T(n)/f(n)) = 1</p><p>T(n) = O(n*log2n)</p><p><strong>一些补充说明</strong></p><p>最坏时间复杂度</p><p>算法的时间复杂度不仅与语句频度有关，还与问题规模及输入实例中各元素的取值有关。一般不特别说明，讨论的时间复杂度均是最坏情况下的时间复杂度。这就保证了算法的运行时间不会比任何更长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构与算法-02&quot;&gt;&lt;a href=&quot;#数据结构与算法-02&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法-02&quot;&gt;&lt;/a&gt;数据结构与算法-02&lt;/h1&gt;&lt;h2 id=&quot;时间复杂度与大-O-表示法&quot;&gt;&lt;a href=&quot;#时间复杂度与大-
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法-01</title>
    <link href="http://yoursite.com/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/"/>
    <id>http://yoursite.com/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-01/</id>
    <published>2020-03-17T11:01:28.675Z</published>
    <updated>2020-03-17T15:27:49.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法-01"><a href="#数据结构与算法-01" class="headerlink" title="数据结构与算法-01"></a>数据结构与算法-01</h1><h3 id="什么是动态数组"><a href="#什么是动态数组" class="headerlink" title="什么是动态数组"></a>什么是动态数组</h3><p>C#中的数组</p><p>静态数组： int[] float[] double[] char[] string[]</p><p>特点：数组一旦被创建，其容量大小是无法改变的</p><p>int[] arr = new int[20]</p><p>动态数组：ArrayList List(泛型)</p><p>特点：可以根据元素的多少动态的调整数组容量的大小</p><h2 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] arr &#x3D; new int[10];</span><br><span class="line">           for(int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               arr[i] &#x3D; i;</span><br><span class="line">               Console.Write(arr[i] + &quot;&quot;);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>数组存储满后无法继续添加元素</p><h2 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ArrayList a &#x3D; new ArrayList(10);</span><br><span class="line">            for(int i &#x3D; 0; i &lt; 15; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                a.Add(i);</span><br><span class="line">                Console.Write(a[i] + &quot; &quot;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>可以继续通过 <strong>数组名.Add()</strong> 继续添加元素</p><h3 id="List（泛型）"><a href="#List（泛型）" class="headerlink" title="List（泛型）"></a>List（泛型）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int&gt; b &#x3D; new List&lt;int&gt;(10);</span><br><span class="line">            for (int i &#x3D; 0; i &lt; 15; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                b.Add(i);</span><br><span class="line">                Console.Write(b[i]+&quot; &quot;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>与 ArrayList 相同</p><p>==使用动态数组需要先引入命名空间==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br></pre></td></tr></table></figure><h2 id="如何编写一个动态数组"><a href="#如何编写一个动态数组" class="headerlink" title="如何编写一个动态数组"></a>如何编写一个动态数组</h2><blockquote><p>先编写一个大体</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 数据结构</span><br><span class="line">&#123;</span><br><span class="line">    class Array1</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建数组储存元素</span><br><span class="line">        private int[] data;</span><br><span class="line">        &#x2F;&#x2F;记录数组元素数量</span><br><span class="line">        private int N;</span><br><span class="line">        &#x2F;&#x2F;用户输入数组大小</span><br><span class="line">        public Array1(int capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            data &#x3D; new int[capacity];</span><br><span class="line">            N &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用户不输入默认创建数组大小</span><br><span class="line">        &#x2F;&#x2F;两个方法作用相同</span><br><span class="line">        public Array1() : this(10) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public Array1()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    data &#x3D; new int[10];</span><br><span class="line">        &#x2F;&#x2F;    N &#x3D; 10;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;访问数组的容量</span><br><span class="line">        public int Capacity</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return data.Length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;访问数组中元素的多少</span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询数组是否为空</span><br><span class="line">        public bool IsEmpty</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N &#x3D;&#x3D; 0; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="往数组添加元素"><a href="#往数组添加元素" class="headerlink" title="往数组添加元素"></a>往数组添加元素</h4><blockquote><p>添加操作 <strong><u><em>N=数组中的元素数量</em></u></strong></p></blockquote><p>==1.往数组末尾添加元素==</p><p>直接向 N 的位置添加元素</p><p>添加之后 N++</p><p>==2.往指定位置添加元素==</p><p>将指定位置后面的元素从最后一位开始向后移动一位</p><p>一直移动到指定位置中的原本的元素也后移一位时</p><p>再将新元素添加到指定位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public void Add(int index,int e)</span><br><span class="line">       &#123;</span><br><span class="line">           if (index &lt; 0 || index &gt; N)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组容量已满！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           for(int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">           &#123;</span><br><span class="line">               data[i + 1] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           data[index] &#x3D; e;</span><br><span class="line">           N++;</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;末尾添加元素 直接调用上面Add方法</span><br><span class="line">       public void AddLast(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           Add(N, e);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;头部添加元素 也直接调用Add</span><br><span class="line">       public void AddFirst(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           Add(0, e);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="打印、获取、修改"><a href="#打印、获取、修改" class="headerlink" title="打印、获取、修改"></a>打印、获取、修改</h4><blockquote><p>打印数组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;打印数组</span><br><span class="line">&#x2F;&#x2F;重写一个ToString方法</span><br><span class="line">public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">    &#x2F;&#x2F;字符串构造</span><br><span class="line">            StringBuilder res &#x3D; new StringBuilder();</span><br><span class="line">    &#x2F;&#x2F;数组信息</span><br><span class="line">            res.Append(string.Format(&quot;Array1: count&#x3D;&#123;0&#125; capacity&#x3D;&#123;1&#125;\n&quot;, N, data.Length));</span><br><span class="line">    &#x2F;&#x2F;拼接数组元素</span><br><span class="line">            res.Append(&quot;[&quot;);</span><br><span class="line">    &#x2F;&#x2F;遍历数组元素</span><br><span class="line">            for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.Append(data[i]);</span><br><span class="line">                if (i !&#x3D; N - 1)</span><br><span class="line">                    res.Append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            res.Append(&quot;]&quot;);</span><br><span class="line">    &#x2F;&#x2F;返回结果</span><br><span class="line">            return res.ToString();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取数组元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取数组元素</span><br><span class="line">        public int Get(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            return data[index];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取头部元素</span><br><span class="line">        public int Getfirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取尾部的元素</span><br><span class="line">        public int GetLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(N - 1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;修改元素</span><br><span class="line">        public void Set(int index, int newE)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            data[index]&#x3D;newE;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="包含、查询、删除"><a href="#包含、查询、删除" class="headerlink" title="包含、查询、删除"></a>包含、查询、删除</h4><blockquote><p>查询是否包含元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询是否包含某元素</span><br><span class="line">        public bool Contains(int e)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (data[i] &#x3D;&#x3D; e)</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询元素位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询元素所在的位置</span><br><span class="line">       public int IndexOf(int e)</span><br><span class="line">       &#123;</span><br><span class="line">           for(int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               if (data[i] &#x3D;&#x3D; e)</span><br><span class="line">                   return i;</span><br><span class="line">           &#125;</span><br><span class="line">           return -1;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除元素</p></blockquote><p>==删除元素后会空出一个位置，所以需要将删除位置后面的元素向前移动一位==</p><p>==N 也要减一==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除元素</span><br><span class="line">        public int RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            int del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for(int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除头部元素</span><br><span class="line">        public int RemoveFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除尾部元素</span><br><span class="line">        public int RemoveLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(N-1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="数组扩容"><a href="#数组扩容" class="headerlink" title="数组扩容"></a>数组扩容</h4><p>==新建一个更大打的数组，将原来的元素复制到新的数组==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;数组扩容</span><br><span class="line">      private void ResetCapacity(int newCapacityt)</span><br><span class="line">       &#123;</span><br><span class="line">           &#x2F;&#x2F;新建数组</span><br><span class="line">           int[] newdata &#x3D; new int[newCapacityt];</span><br><span class="line">           &#x2F;&#x2F;复制原来的元素</span><br><span class="line">           for(int i&#x3D;0; i &lt; N; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               newdata[i] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;替换</span><br><span class="line">           data &#x3D; newdata;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>==此时我们就可以将之前的抛出异常改为扩容==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;向数组添加元素</span><br><span class="line">       public void Add(int index,int e)</span><br><span class="line">       &#123;</span><br><span class="line">           if (index &lt; 0 || index &gt; N)</span><br><span class="line">           &#123;</span><br><span class="line">               throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">             &#x2F;&#x2F;throw new ArgumentException(&quot;数组容量已满！&quot;);</span><br><span class="line">               ResetCapacity(data.Length * 2);</span><br><span class="line">           for(int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">           &#123;</span><br><span class="line">               data[i + 1] &#x3D; data[i];</span><br><span class="line">           &#125;</span><br><span class="line">           data[index] &#x3D; e;</span><br><span class="line">           N++;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h4 id="数组缩容"><a href="#数组缩容" class="headerlink" title="数组缩容"></a>数组缩容</h4><p>==如果数组空间过大而元素过少就会造成内存的浪费，此时我们进行缩容操作==</p><h5 id="在删除方法中添加一个是否需要缩容的判断"><a href="#在删除方法中添加一个是否需要缩容的判断" class="headerlink" title="在删除方法中添加一个是否需要缩容的判断"></a>在删除方法中添加一个是否需要缩容的判断</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用索引删除元素</span><br><span class="line">        public int RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            int del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for(int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;判断是否需要缩容</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length &#x2F; 4)</span><br><span class="line">                ResetCapacity(data.Length &#x2F; 2);</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>只能储存整型的元素，其他类型都不能存储</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>隐式的转化为 object 类型进行元素的存储</p><p>使用时再强制转化为对应的类型</p><p>==ArrayList 就是采用这种方法==</p><p>类型的转化会频繁进行装箱和拆箱[^1]的操作，在性能上大打折扣</p><p>所以我们采用 List(泛型)这种方法</p><h6 id="1-装箱和拆箱"><a href="#1-装箱和拆箱" class="headerlink" title="[^1]装箱和拆箱"></a>[^1]装箱和拆箱</h6><p><code>装箱：值类型转换为引用类型</code></p><p><code>拆箱：引用类型转化为值类型</code></p><p><code>引用类型：任何称为“类”的类型都是引用类型，使用class修饰</code></p><p><code>如：string object</code></p><p><code>值类型：所有值类型都称为结构或枚举，使用struct或enum修饰</code></p><p><code>如：int float double char</code></p><h4 id="ArrayList-与-List-性能测试"><a href="#ArrayList-与-List-性能测试" class="headerlink" title="ArrayList 与 List 性能测试"></a>ArrayList 与 List 性能测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; 10000000;</span><br><span class="line">         &#x2F;&#x2F;需要引入命名空间</span><br><span class="line">         Stopwatch t1 &#x3D; new Stopwatch();</span><br><span class="line">         Stopwatch t2 &#x3D; new Stopwatch();</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(&quot;测试值类型对象int&quot;);</span><br><span class="line">         t1.Start();</span><br><span class="line">         List&lt;int&gt; l &#x3D; new List&lt;int&gt;();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             l.Add(i);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             int x &#x3D; l[i];&#x2F;&#x2F;不发生拆箱</span><br><span class="line">         &#125;</span><br><span class="line">         t1.Stop();</span><br><span class="line">         Console.WriteLine(&quot;List time: &quot; + t1.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line">         t2.Start();</span><br><span class="line">         ArrayList d &#x3D; new ArrayList();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             d.Add(i);&#x2F;&#x2F;发生装箱 “值类型转化为object引用类型”</span><br><span class="line">             int x &#x3D; (int)d[i];&#x2F;&#x2F;发生拆箱操作 “引用类型转化为值类型”</span><br><span class="line">         &#125;</span><br><span class="line">         t2.Stop();</span><br><span class="line">         Console.WriteLine(&quot;ArrayList time: &quot; + t2.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line">         Console.Read();</span><br></pre></td></tr></table></figure><p>启动时将 Debug 改为优化版的 Release 进行性能测试</p><p>==<strong>测试结果</strong>==</p><p>==List time: 64ms<br>ArrayList time: 913ms==</p><p>可见值类型的存储性能相差巨大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">int n &#x3D; 10000000;</span><br><span class="line">         &#x2F;&#x2F;需要引入命名空间</span><br><span class="line">         Stopwatch t1 &#x3D; new Stopwatch();</span><br><span class="line">         Stopwatch t2 &#x3D; new Stopwatch();</span><br><span class="line"></span><br><span class="line">         Console.WriteLine(&quot;测试值类型对象string&quot;);</span><br><span class="line">         t1.Start();</span><br><span class="line">         List&lt;string&gt; l &#x3D; new List&lt;string&gt;();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             l.Add(&quot;X&quot;);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             string x &#x3D; l[i];&#x2F;&#x2F;不发生拆箱</span><br><span class="line">         &#125;</span><br><span class="line">         t1.Stop();</span><br><span class="line">         Console.WriteLine(&quot;List time: &quot; + t1.ElapsedMilliseconds + &quot;ms&quot;);</span><br><span class="line"></span><br><span class="line">         t2.Start();</span><br><span class="line">         ArrayList d &#x3D; new ArrayList();</span><br><span class="line">         for (int i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             d.Add(&quot;x&quot;);&#x2F;&#x2F;不发生装箱</span><br><span class="line">             string x &#x3D; (string)d[i];&#x2F;&#x2F;不发生拆箱操作</span><br><span class="line">         &#125;</span><br><span class="line">         t2.Stop();</span><br><span class="line">         Console.WriteLine(&quot;ArrayList time: &quot; + t2.ElapsedMilliseconds + &quot;ms&quot;);</span><br></pre></td></tr></table></figure><p>引用类型的性能相差不大</p><p>==<strong>测试结果</strong>==</p><p>==List time: 158ms<br>ArrayList time: 235ms==</p><h4 id="泛型和非泛型"><a href="#泛型和非泛型" class="headerlink" title="泛型和非泛型"></a>泛型和非泛型</h4><p><strong>泛型数组优势</strong></p><p>第一是对于存储值类型数据，性能更优</p><p>第二是使代码更清晰和保证类型安全</p><p>==List<int> l = new List<int>();==</p><p>必须指定一个指定类型</p><p>==ArrayList a = new ArrayList();==</p><p>什么类型都能存储，取出时需要明确转换类型，不然就会报错</p><h4 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h4><p>将创建、添加、返回的类型改为“E”==:占位符==即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace 数据结构</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;将数组改为泛型</span><br><span class="line">    class Array2&lt;E&gt;&#x2F;&#x2F;E仅为占位符代表用户定义的值类型 可以改成任意</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;创建数组储存元素</span><br><span class="line">        private E[] data;</span><br><span class="line">        &#x2F;&#x2F;记录数组元素数量</span><br><span class="line">        private int N;</span><br><span class="line">        &#x2F;&#x2F;用户输入数组大小</span><br><span class="line">        public Array2(int capacity)</span><br><span class="line">        &#123;</span><br><span class="line">            data &#x3D; new E[capacity];</span><br><span class="line">            N &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用户不输入默认创建数组大小</span><br><span class="line">        &#x2F;&#x2F;两个方法作用相同</span><br><span class="line">        public Array2() : this(10) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public Array1()</span><br><span class="line">        &#x2F;&#x2F;&#123;</span><br><span class="line">        &#x2F;&#x2F;    data &#x3D; new int[10];</span><br><span class="line">        &#x2F;&#x2F;    N &#x3D; 10;</span><br><span class="line">        &#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;访问数组的容量</span><br><span class="line">        public int Capacity</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return data.Length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;访问数组中元素的多少</span><br><span class="line">        public int Count</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询数组是否为空</span><br><span class="line">        public bool IsEmpty</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; return N &#x3D;&#x3D; 0; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;向数组添加元素</span><br><span class="line">        public void Add(int index, E e)</span><br><span class="line">        &#123;</span><br><span class="line">            if (index &lt; 0 || index &gt; N)</span><br><span class="line">            &#123;</span><br><span class="line">                throw new ArgumentException(&quot;数组索引越界！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length)</span><br><span class="line">                ResetCapacity(data.Length * 2);</span><br><span class="line">            for (int i &#x3D; N - 1; i &gt;&#x3D; index; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i + 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            data[index] &#x3D; e;</span><br><span class="line">            N++;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;末尾添加元素 直接调用上面Add方法</span><br><span class="line">        public void AddLast(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            Add(N, e);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;头部添加元素 也直接调用Add</span><br><span class="line">        public void AddFirst(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            Add(0, e);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;打印数组</span><br><span class="line">        &#x2F;&#x2F;重写一个ToString方法</span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;字符串构造</span><br><span class="line">            StringBuilder res &#x3D; new StringBuilder();</span><br><span class="line">            &#x2F;&#x2F;数组信息</span><br><span class="line">            res.Append(string.Format(&quot;Array1: count&#x3D;&#123;0&#125; capacity&#x3D;&#123;1&#125;\n&quot;, N, data.Length));</span><br><span class="line">            &#x2F;&#x2F;拼接数组元素</span><br><span class="line">            res.Append(&quot;[&quot;);</span><br><span class="line">            &#x2F;&#x2F;遍历数组元素</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                res.Append(data[i]);</span><br><span class="line">                if (i !&#x3D; N - 1)</span><br><span class="line">                    res.Append(&quot;, &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            res.Append(&quot;]&quot;);</span><br><span class="line">            &#x2F;&#x2F;返回结果</span><br><span class="line">            return res.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取数组元素</span><br><span class="line">        public E Get(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            return data[index];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取头部元素</span><br><span class="line">        public E Getfirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取尾部的元素</span><br><span class="line">        public E GetLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return Get(N - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;修改元素</span><br><span class="line">        public void Set(int index, E newE)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            data[index] &#x3D; newE;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询是否包含某元素</span><br><span class="line">        public bool Contains(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;使用Equals进行元素比较 替换掉原来的&#x3D;&#x3D;</span><br><span class="line">                if (data[i].Equals(e))</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;查询元素所在的位置</span><br><span class="line">        public int IndexOf(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (data[i].Equals(e))</span><br><span class="line">                    return i;</span><br><span class="line">            &#125;</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;用索引删除元素</span><br><span class="line">        public E RemoveAt(int index)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;检查索引合法性</span><br><span class="line">            if (index &lt; 0 || index &gt;&#x3D; N)</span><br><span class="line">                throw new ArgumentException(&quot;索引越界！&quot;);</span><br><span class="line">            E del &#x3D; data[index];</span><br><span class="line">            &#x2F;&#x2F;移动元素</span><br><span class="line">            for (int i &#x3D; index + 1; i &lt;&#x3D; N - 1; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i - 1] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;修正元素数量</span><br><span class="line">            N--;</span><br><span class="line">            &#x2F;&#x2F;判断是否需要缩容</span><br><span class="line">            if (N &#x3D;&#x3D; data.Length &#x2F; 4)</span><br><span class="line">                ResetCapacity(data.Length &#x2F; 2);</span><br><span class="line">            &#x2F;&#x2F;返回删除的值</span><br><span class="line">            return del;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除头部元素</span><br><span class="line">        public E RemoveFirst()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(0);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除尾部元素</span><br><span class="line">        public E RemoveLast()</span><br><span class="line">        &#123;</span><br><span class="line">            return RemoveAt(N - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;删除特定元素</span><br><span class="line">        public void Remove(E e)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;查找元素</span><br><span class="line">            int index &#x3D; IndexOf(e);</span><br><span class="line">            &#x2F;&#x2F;检查</span><br><span class="line">            if (index !&#x3D; -1)</span><br><span class="line">                &#x2F;&#x2F;删除元素</span><br><span class="line">                RemoveAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;数组扩容</span><br><span class="line">        private void ResetCapacity(int newCapacityt)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;新建数组</span><br><span class="line">            E[] newdata &#x3D; new E[newCapacityt];</span><br><span class="line">            &#x2F;&#x2F;复制原来的元素</span><br><span class="line">            for (int i &#x3D; 0; i &lt; N; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                newdata[i] &#x3D; data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;替换</span><br><span class="line">            data &#x3D; newdata;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构与算法-01&quot;&gt;&lt;a href=&quot;#数据结构与算法-01&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法-01&quot;&gt;&lt;/a&gt;数据结构与算法-01&lt;/h1&gt;&lt;h3 id=&quot;什么是动态数组&quot;&gt;&lt;a href=&quot;#什么是动态数组&quot; class
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客使用</title>
    <link href="http://yoursite.com/2020/03/16/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/16/%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-16T05:55:42.219Z</published>
    <updated>2020-03-16T06:02:29.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="●-在博客上发表文章"><a href="#●-在博客上发表文章" class="headerlink" title="● 在博客上发表文章"></a>● 在博客上发表文章</h1><p>​            ① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题            根据需要命名</p><ul><li><pre><code>hexo n &quot;文章标题&quot;</code></pre><p>​    也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><p>​    ② 用编辑器编写文章</p><h5 id="md-全称-Markdown，-Markdown-是-2004-年由-John-Gruberis-设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，-md-文件可以使用支持-Markdown-语法的编辑器编辑，然后保存文件到-Hexo-source-posts-文件夹下即可"><a href="#md-全称-Markdown，-Markdown-是-2004-年由-John-Gruberis-设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，-md-文件可以使用支持-Markdown-语法的编辑器编辑，然后保存文件到-Hexo-source-posts-文件夹下即可" class="headerlink" title="md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可"></a>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</h5></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;●-在博客上发表文章&quot;&gt;&lt;a href=&quot;#●-在博客上发表文章&quot; class=&quot;headerlink&quot; title=&quot;● 在博客上发表文章&quot;&gt;&lt;/a&gt;● 在博客上发表文章&lt;/h1&gt;&lt;p&gt;​            ① 新建一个空文章，输入以下命令，会在项目 \He
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="技巧" scheme="http://yoursite.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typora编辑器</title>
    <link href="http://yoursite.com/2020/03/16/Typora%E7%BC%96%E7%A0%81%E5%99%A8/"/>
    <id>http://yoursite.com/2020/03/16/Typora%E7%BC%96%E7%A0%81%E5%99%A8/</id>
    <published>2020-03-16T05:38:53.000Z</published>
    <updated>2020-03-17T15:28:10.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-编辑器-————-书写即为美学"><a href="#Typora-编辑器-————-书写即为美学" class="headerlink" title="Typora 编辑器 ———— 书写即为美学"></a>Typora 编辑器 ———— 书写即为美学</h1><p>我也是初学者，仅仅是个人经验总结，不保证质量。</p><p>鉴于 hexo 渲染和 Typora 渲染差距很大，建议复制<a href="https://paste.ubuntu.com/26540980/" target="_blank" rel="noopener">此处</a>源码，在本机上测试效果。</p><p>官方网站：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p><p>支持平台：</p><ul><li>Windows</li><li>Linux</li><li>OSX</li></ul><p>特点：</p><ul><li>完美支持 Github 的 Markdown 语法；</li><li>人性化的书写方式：<ul><li>表格的书写、挪动；</li><li>图片，超链接，网页表格复制；</li><li>目录生成；</li></ul></li><li>支持 LeTex 公式书写；</li><li>支持 Flowchart，Mermaid 等流程图绘制；</li><li>emoji，高亮，备注，上标，下标等书写；</li><li>生成网页，pdf，图片，甚至 word，LeTex 等格式。</li></ul><h2 id="基本的带快捷键的-Markdown-书写演示"><a href="#基本的带快捷键的-Markdown-书写演示" class="headerlink" title="基本的带快捷键的 Markdown 书写演示"></a>基本的带快捷键的 Markdown 书写演示</h2><p><code>Ctrl 0</code> 到 <code>Ctrl 4</code>：普通文本、一级～四级标题；</p><p><code>Ctrl B</code>：加粗，<strong>加粗测试</strong>；</p><p><code>Ctrl I</code>：斜体，<em>斜体测试</em>；</p><p><code>Ctrl U</code>：下划线，下划线测试；</p><p><code>Shift Alt 5</code>：删除线，<del>删除线测试</del>；</p><p><code>Shift Ctrl Tab键上面那个键</code>：行内代码块，<code>行内代码块测试</code>；</p><p><code>Ctrl K</code>：超链接，<a href="https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/www.baidu.com" target="_blank" rel="noopener">超链接测试</a>；还支持文章内锚点，请 <code>Ctrl</code> 点击此处 :arrow_right: [第二节](<a href="https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/#基本的不带快捷键" target="_blank" rel="noopener">https://baka943.coding.me/2018/02/08/2018-02-08-TyporaSimpleDoc/#基本的不带快捷键</a> Markdown 书写演示)；</p><p><code>Ctrl T</code>：表格，支持拖拽移动、网页端表格复制转换：</p><table><thead><tr><th align="center">标题</th><th align="center">数据一</th><th align="center">数据二</th></tr></thead><tbody><tr><td align="center">表格测试</td><td align="center">943</td><td align="center">baka</td></tr></tbody></table><p><code>Ctrl Shift Q</code>：引用：</p><blockquote><p>我需要三件东西：爱情、友谊和图书。然而这三者之间何其相通！</p><p>炽热的爱情可以充实图书的内容，图书又是人们最忠实的朋友。</p><p>—— 蒙田</p></blockquote><p><code>Shift Ctrl I</code>：图片：</p><p><a href="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" target="_blank" rel="noopener"><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="风景"></a></p><p><code>Shift Ctrl M</code>：公示块，快捷输入 LeTex 公式：<br>$$<br>Euler’s identity: e^{i\pi}+1=0<br>$$</p><h2 id="基本的不带快捷键-Markdown-书写演示"><a href="#基本的不带快捷键-Markdown-书写演示" class="headerlink" title="基本的不带快捷键 Markdown 书写演示"></a>基本的不带快捷键 Markdown 书写演示</h2><p><strong>部分功能需要现在配置文件中开启才能使用</strong></p><p>代码块（我居然不能转义那个字符，就 Tab 键上面那个）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">import os</span><br><span class="line">with open(&#39;List.txt&#39;, &#39;w&#39;) as f:</span><br><span class="line">for i in range(10):</span><br><span class="line">f.writelines(str(i))  </span><br><span class="line">print(&#39;成功写入数列&#39;)</span><br><span class="line">os.system(&#39;rm .&#x2F;List.txt&#39;)</span><br><span class="line">print(&#39;成功删除文件&#39;)</span><br></pre></td></tr></table></figure><p>无序、有序、任务列表：</p><ul><li>酒石酸菌</li><li>玄墨之蝶</li></ul><ol><li>HTML</li><li>Python 3</li></ol><ul><li>1.12.2 教程计划</li><li>Weblate 翻译计划</li><li>All The Mods 3 实况计划</li></ul><p>参考链接：</p><p> 通过培养试验研究了有机酸对铅、镉的毒害影响，结果表明柠檬酸对铅[^1]，酒石酸对镉有较明显解毒作用[^2]。用逐步提取法研究萝卜根叶内重金属存在的化学形态 ，有机酸处理并不影响各形态铅的优势顺序 ，但各形态铅的浓度或相对百分率发生了变化。</p><p>[^1]: 陈苏. 污染土壤中镉、铅的活化及植物有效性研究[D]. 中国科学院沈阳应用生态研究所, 2007.<br>[^2]: 陈英旭, 林琦, 陆芳,等. 有机酸对铅、镉植株危害的解毒作用研究[J]. 环境科学学报, 2000, 20(4):467-472.</p><p>上标下标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">上标：X^2^</span><br><span class="line">下标：H~2~O</span><br></pre></td></tr></table></figure><p>X^2^, H<del>2</del>O</p><p>高亮：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本节课重点：&#x3D;&#x3D;第六、七章不考&#x3D;&#x3D;，第三章出题较多，&#x3D;&#x3D;平时分占 30%&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>本节课重点：==第六、七章不考==，第三章出题较多，==平时分占 30%==</p><p>注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这一段不要显示出来--&gt;</span><br></pre></td></tr></table></figure><p>内联公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$e^&#123;i\pi&#125;+1&#x3D;0$</span><br></pre></td></tr></table></figure><p>$e^{i\pi}+1=0$</p><p>分割线：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><p>我绝不会弃坑的！</p><hr><p>:arrow_up: 上面的都是假话</p><p>emoji 图标：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:arrow_heading_down: :arrow_heading_up:</span><br><span class="line">:ab: :blue_heart: :jack_o_lantern:</span><br><span class="line">:ballot_box_with_check: :fork_and_knife:</span><br></pre></td></tr></table></figure><p>:arrow_heading_down: :arrow_heading_up:<br>:ab: :blue_heart: :jack_o_lantern:<br>:ballot_box_with_check: :fork_and_knife:</p><p>目录生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure><p>[TOC]</p><h1 id="Markdown-拓展功能"><a href="#Markdown-拓展功能" class="headerlink" title="Markdown 拓展功能"></a>Markdown 拓展功能</h1><p>HTML 原生支持，目前只支持 img 标签，用以自定义图片大小和缩放：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;static.pexels.com&#x2F;photos&#x2F;461797&#x2F;pexels-photo-461797.jpeg width&#x3D;&quot;550px&quot; alt&#x3D;&quot;test&quot;&gt;&lt;&#x2F;img&gt;</span><br></pre></td></tr></table></figure><p><a href="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" target="_blank" rel="noopener"><img src="https://static.pexels.com/photos/461797/pexels-photo-461797.jpeg" alt="test"></a></p><p>LaTex 公式支持，包括 mhchem，AMSmath，BBox：</p><p>mhchem：<br>$$<br>\ce{SO4^2- + Ba^2+ -&gt; BaSO4 v}<br>$$<br>BBox：<br>$$<br>\bbox[5px,border:2px solid red]{AB^2 +AC^2 = BC^2}<br>$$</p><p>流程图支持，内置了 Flowchart，Sequence，Mermaid 引擎，支持多种多样的流程图、时序图、甘特图：</p><ul><li>流程图（Flowchart）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;http:&#x2F;&#x2F;www.google.com[blank]</span><br><span class="line">e&#x3D;&gt;end:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">op1&#x3D;&gt;operation: My Operation</span><br><span class="line">sub1&#x3D;&gt;subroutine: My Subroutine</span><br><span class="line">cond&#x3D;&gt;condition: Yes</span><br><span class="line">or No?:&gt;http:&#x2F;&#x2F;www.google.com</span><br><span class="line">io&#x3D;&gt;inputoutput: catch something...</span><br><span class="line"></span><br><span class="line">st-&gt;op1-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op1</span><br></pre></td></tr></table></figure><ul><li>流程图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    开始--&gt;条件B;</span><br><span class="line">    条件A--&gt;条件C;</span><br><span class="line">    条件B--&gt;条件D;</span><br><span class="line">    条件C--&gt;条件D;</span><br><span class="line">    条件A--&gt;条件D;</span><br><span class="line">    开始--&gt;条件C;</span><br><span class="line">    开始--&gt;条件A;</span><br><span class="line">    条件D--&gt;结束;</span><br></pre></td></tr></table></figure><ul><li>时序图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br&#x2F;&gt;prevail...</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><ul><li>时序图（Sequence）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">Note right of John: Rational thoughts</span><br><span class="line">John--&gt;&gt;Alice: Great!</span><br><span class="line">John-&gt;&gt;Bob: How about you?</span><br><span class="line">Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure><ul><li>甘特图（Mermaid）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section A section</span><br><span class="line">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        Future task               :         des3, after des2, 5d</span><br><span class="line">        Future task2               :         des4, after des3, 5d</span><br><span class="line">        section Critical tasks</span><br><span class="line">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">        Create tests for parser             :crit, active, 3d</span><br><span class="line">        Future task in critical line        :crit, 5d</span><br><span class="line">        Create tests for renderer           :2d</span><br><span class="line">        Add to mermaid                      :1d</span><br></pre></td></tr></table></figure><hr><ul><li>其他 Mermaid 图（目前还有点问题，不建议使用）</li><li>Class diagram</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 &lt;--&gt; C2: Cool label</span><br></pre></td></tr></table></figure><ul><li>Git</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line">    &quot;nodeSpacing&quot;: 100,</span><br><span class="line">    &quot;nodeRadius&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br></pre></td></tr></table></figure><h2 id="主题替换"><a href="#主题替换" class="headerlink" title="主题替换"></a>主题替换</h2><p>访问：<a href="http://theme.typora.io/" target="_blank" rel="noopener">http://theme.typora.io/</a></p><h2 id="文章导出"><a href="#文章导出" class="headerlink" title="文章导出"></a>文章导出</h2><ul><li>图片（非常适合手机阅读）</li><li>PDF</li><li>HTML（可选择是否带样式表）</li><li>其他需要第三方库支持</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Typora-编辑器-————-书写即为美学&quot;&gt;&lt;a href=&quot;#Typora-编辑器-————-书写即为美学&quot; class=&quot;headerlink&quot; title=&quot;Typora 编辑器 ———— 书写即为美学&quot;&gt;&lt;/a&gt;Typora 编辑器 ———— 书写即为
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/15/hello-world/"/>
    <id>http://yoursite.com/2020/03/15/hello-world/</id>
    <published>2020-03-15T09:56:01.313Z</published>
    <updated>2020-03-16T05:46:32.067Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hello word" scheme="http://yoursite.com/tags/hello-word/"/>
    
  </entry>
  
</feed>
